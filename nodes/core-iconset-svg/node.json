{
  "name": "core-iconset-svg",
  "ns": "polymer",
  "type": "polymer",
  "description": "The `core-iconset-svg` element allows users to define their own icon sets\nthat contain svg icons. The svg icon elements should be children of the\n`core-iconset-svg` element. Multiple icons should be given distinct id's.\n\nUsing svg elements to create icons has a few advantages over traditional\nbitmap graphics like jpg or png. Icons that use svg are vector based so they\nare resolution independent and should look good on any device. They are\nstylable via css. Icons can be themed, colorized, and even animated.\n\nExample:\n\n    <core-iconset-svg id=\"my-svg-icons\" iconSize=\"24\">\n      <svg>\n        <defs>\n          <g id=\"shape\">\n            <rect x=\"50\" y=\"50\" width=\"50\" height=\"50\" />\n            <circle cx=\"50\" cy=\"50\" r=\"50\" />\n          </g>\n        </defs>\n      </svg>\n    </core-iconset-svg>\n\nThis will automatically register the icon set \"my-svg-icons\" to the iconset\ndatabase.  To use these icons from within another element, make a\n`core-iconset` element and call the `byId` method\nto retrieve a given iconset. To apply a particular icon inside an\nelement use the `applyIcon` method. For example:\n\n    iconset.applyIcon(iconNode, 'car');",
  "dependencies": {
    "bower": {
      "core-iconset-svg": "Polymer/core-iconset-svg#master"
    }
  },
  "ports": {
    "input": {
      "iconSize": {
        "name": "iconSize",
        "description": "The size of an individual icon. Note that icons must be square.",
        "type": "number",
        "default": "24"
      },
      "applyIcon": {
        "name": "applyIcon",
        "description": "Applies an icon to the given element. The svg icon is added to the\nelement's shadowRoot if one exists or directly to itself.\n\napplied.",
        "params": [
          {
            "type": "Element",
            "name": "element",
            "description": "The element to which the icon is"
          },
          {
            "type": "String|Number",
            "name": "icon",
            "description": "The name the icon to apply."
          }
        ],
        "async": true
      },
      "updateIcons": {
        "name": "updateIcons",
        "description": "Tell users of the iconset, that the set has loaded.\nThis finds all elements matching the selector argument and calls \nthe method argument on them.\ndefaults to '[icon]'\ndefaults to 'updateIcon'",
        "params": [
          {
            "type": "string",
            "name": "css",
            "description": "selector to identify iconset users, "
          },
          {
            "type": "string",
            "name": "method",
            "description": "to call on found elements, "
          }
        ],
        "async": true
      },
      "teardown": {
        "name": "teardown",
        "description": "Tear down the animation.",
        "params": [
          {
            "type": "Node",
            "name": "node",
            "description": "The animated node"
          }
        ],
        "async": true
      },
      "complete": {
        "name": "complete",
        "description": "Called when the animation completes. This function also fires the\n`core-transitionend` event.",
        "params": [
          {
            "type": "Node",
            "name": "node",
            "description": "The animated node"
          }
        ],
        "async": true
      },
      "listenOnce": {
        "name": "listenOnce",
        "description": "Utility function to listen to an event on a node once.",
        "params": [
          {
            "type": "Node",
            "name": "node",
            "description": "The animated node"
          },
          {
            "type": "string",
            "name": "event",
            "description": "Name of an event"
          },
          {
            "type": "Function",
            "name": "fn",
            "description": "Event handler"
          },
          {
            "type": "Array",
            "name": "args",
            "description": "Additional arguments to pass to `fn`"
          }
        ],
        "async": true
      }
    },
    "output": {
      "core-transitionend": {
        "name": "core-transitionend",
        "description": "Fired when the animation finishes.",
        "params": [
          {
            "type": "Object",
            "name": "detail.node",
            "description": "The animated node"
          }
        ]
      }
    }
  }
}