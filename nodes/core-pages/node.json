{
  "name": "core-pages",
  "title": "Core pages",
  "ns": "polymer",
  "type": "polymer",
  "description": "`core-pages` is used to select one of its children to show. One use is to cycle through a list of children \"pages\".\n\nExample: \n\n    <core-pages selected=\"0\">\n      <div>One</div>\n      <div>Two</div>\n      <div>Three</div>\n    </core-pages>\n\n    <script>\n      document.addEventListener('click', function(e) {\n        var pages = document.querySelector('core-pages');\n        pages.selected = (pages.selected + 1) % pages.children.length;\n      });\n    </script>",
  "dependencies": {
    "bower": {
      "core-pages": "Polymer/core-pages#master"
    }
  },
  "ports": {
    "input": {
      "transitions": {
        "name": "transitions",
        "description": "A space-delimited string of transitions to use when switching between pages in this element.\nThe strings are `id`s of `core-transition-pages` elements included elsewhere. See the\nindividual transition's document for specific details.",
        "type": "string",
        "default": "''",
        "title": "Transitions"
      },
      "lastSelected": {
        "name": "lastSelected",
        "description": "The last page selected. This property is useful to dynamically set transitions based\non incoming and outgoing pages.",
        "type": "Object",
        "default": "null",
        "title": "Last selected"
      },
      "noslide": {
        "name": "noslide",
        "description": "If true, the slide effect for the bottom bar is disabled.",
        "type": "boolean",
        "default": "false",
        "title": "Noslide"
      },
      "scrollable": {
        "name": "scrollable",
        "description": "If true, tabs are scrollable and the tab width is based on the label width.",
        "type": "boolean",
        "default": "false",
        "title": "Scrollable"
      },
      "disableDrag": {
        "name": "disableDrag",
        "description": "If true, dragging on the tabs to scroll is disabled.",
        "type": "boolean",
        "default": "false",
        "title": "Disable drag"
      },
      "hideScrollButton": {
        "name": "hideScrollButton",
        "description": "If true, scroll buttons (left/right arrow) will be hidden for scrollable tabs.",
        "type": "boolean",
        "default": "false",
        "title": "Hide scroll button"
      },
      "selectedItem": {
        "name": "selectedItem",
        "description": "Returns the currently selected element. In multi-selection this returns\nan array of selected elements.\nNote that you should not use this to set the selection. Instead use\n`selected`.",
        "type": "Object",
        "default": "null",
        "title": "Selected item"
      },
      "selectedModel": {
        "name": "selectedModel",
        "description": "In single selection, this returns the model associated with the\nselected element.\nNote that you should not use this to set the selection. Instead use \n`selected`.",
        "type": "Object",
        "default": "null",
        "title": "Selected model"
      },
      "selectedIndex": {
        "name": "selectedIndex",
        "description": "In single selection, this returns the selected index.\nNote that you should not use this to set the selection. Instead use\n`selected`.",
        "type": "number",
        "default": "-1",
        "title": "Selected index"
      },
      "excludedLocalNames": {
        "name": "excludedLocalNames",
        "description": "Nodes with local name that are in the list will not be included \nin the selection items.  In the following example, `items` returns four\n`core-item`'s and doesn't include `h3` and `hr`.\n\n    <core-selector excludedLocalNames=\"h3 hr\">\n      <h3>Header</h3>\n      <core-item>Item1</core-item>\n      <core-item>Item2</core-item>\n      <hr>\n      <core-item>Item3</core-item>\n      <core-item>Item4</core-item>\n    </core-selector>",
        "type": "string",
        "default": "''",
        "title": "Excluded local names"
      },
      "target": {
        "name": "target",
        "description": "The target element that contains items.  If this is not set \ncore-selector is the container.",
        "type": "Object",
        "default": "null",
        "title": "Target"
      },
      "itemsSelector": {
        "name": "itemsSelector",
        "description": "This can be used to query nodes from the target node to be used for \nselection items.  Note this only works if `target` is set\nand is not `core-selector` itself.\n\nExample:\n\n    <core-selector target=\"{{$.myForm}}\" itemsSelector=\"input[type=radio]\"></core-selector>\n    <form id=\"myForm\">\n      <label><input type=\"radio\" name=\"color\" value=\"red\"> Red</label> <br>\n      <label><input type=\"radio\" name=\"color\" value=\"green\"> Green</label> <br>\n      <label><input type=\"radio\" name=\"color\" value=\"blue\"> Blue</label> <br>\n      <p>color = {{color}}</p>\n    </form>",
        "type": "string",
        "default": "''",
        "title": "Items selector"
      },
      "activateEvent": {
        "name": "activateEvent",
        "description": "The event that would be fired from the item element to indicate\nit is being selected.",
        "type": "string",
        "default": "'tap'",
        "title": "Activate event"
      },
      "notap": {
        "name": "notap",
        "description": "Set this to true to disallow changing the selection via the\n`activateEvent`.",
        "type": "boolean",
        "default": "false",
        "title": "Notap"
      },
      "updateBar": {
        "name": "updateBar",
        "description": "Invoke this to update the size and position of the bottom bar.  Usually\nyou only need to call this if the `paper-tabs` is initially hidden and\nlater becomes visible.",
        "title": "Update bar",
        "async": true,
        "type": "object",
        "properties": {
          "wrapped": {
            "type": "boolean",
            "name": "wrapped",
            "description": "if true and it is already at the first item,",
            "title": "Wrapped"
          }
        }
      },
      "selectNext": {
        "name": "selectNext",
        "description": "Selects the next item.  This should be used in single selection only.\n\n                 wrap to the front",
        "title": "Select next",
        "async": true,
        "type": "object",
        "properties": {
          "wrapped": {
            "type": "boolean",
            "name": "wrapped",
            "description": "if true and it is already at the last item,",
            "title": "Wrapped"
          }
        }
      }
    },
    "output": {
      "core-animated-pages-transition-prepare": {
        "name": "core-animated-pages-transition-prepare",
        "description": "Fired before a page transition occurs. Both pages involved in the transition are visible when\nthis event fires. This is useful if there is something the client needs to do when a page becomes\nvisible.",
        "title": "Core animated pages transition prepare",
        "type": "object",
        "properties": {
          "detail": {
            "type": "Object",
            "name": "detail",
            "title": "Detail",
            "properties": {
              "isSelected": {
                "type": "boolean",
                "name": "isSelected",
                "description": "true for selection and false for deselection",
                "title": "Is selected"
              },
              "item": {
                "type": "Object",
                "name": "item",
                "description": "the item element",
                "title": "Item"
              }
            }
          }
        }
      },
      "core-animated-pages-transition-end": {
        "name": "core-animated-pages-transition-end",
        "description": "Fired when a page transition completes.",
        "title": "Core animated pages transition end",
        "type": "object",
        "properties": {
          "detail": {
            "type": "Object",
            "name": "detail",
            "title": "Detail",
            "properties": {
              "item": {
                "type": "Object",
                "name": "item",
                "description": "the item element",
                "title": "Item"
              }
            }
          }
        }
      }
    }
  }
}