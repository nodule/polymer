{
  "name": "core-selector",
  "title": "Core selector",
  "ns": "polymer",
  "type": "polymer",
  "description": "`<core-selector>` is used to manage a list of elements that can be selected.\n\nThe attribute `selected` indicates which item element is being selected.\nThe attribute `multi` indicates if multiple items can be selected at once.\nTapping on the item element would fire `core-activate` event. Use\n`core-select` event to listen for selection changes.\n\nExample:\n\n    <core-selector selected=\"0\">\n      <div>Item 1</div>\n      <div>Item 2</div>\n      <div>Item 3</div>\n    </core-selector>\n\n`<core-selector>` is not styled. Use the `core-selected` CSS class to style the selected element.\n\n    <style>\n      .item.core-selected {\n        background: #eee;\n      }\n    </style>\n    ...\n    <core-selector>\n      <div class=\"item\">Item 1</div>\n      <div class=\"item\">Item 2</div>\n      <div class=\"item\">Item 3</div>\n    </core-selector>",
  "dependencies": {
    "bower": {
      "core-selector": "Polymer/core-selector#master"
    }
  },
  "ports": {
    "input": {
      "selected": {
        "name": "selected",
        "description": "Gets or sets the selected element.  Default to use the index\nof the item element.\n\nIf you want a specific attribute value of the element to be\nused instead of index, set \"valueattr\" to that attribute name.\n\nExample:\n\n    <core-selector valueattr=\"label\" selected=\"foo\">\n      <div label=\"foo\"></div>\n      <div label=\"bar\"></div>\n      <div label=\"zot\"></div>\n    </core-selector>\n\nIn multi-selection this should be an array of values.\n\nExample:\n\n    <core-selector id=\"selector\" valueattr=\"label\" multi>\n      <div label=\"foo\"></div>\n      <div label=\"bar\"></div>\n      <div label=\"zot\"></div>\n    </core-selector>\n\n    this.$.selector.selected = ['foo', 'zot'];",
        "type": "Object",
        "default": "null",
        "title": "Selected"
      },
      "multi": {
        "name": "multi",
        "description": "If true, multiple selections are allowed.",
        "type": "boolean",
        "default": "false",
        "title": "Multi"
      },
      "valueattr": {
        "name": "valueattr",
        "description": "Specifies the attribute to be used for \"selected\" attribute.",
        "type": "string",
        "default": "'name'",
        "title": "Valueattr"
      },
      "selectedClass": {
        "name": "selectedClass",
        "description": "Specifies the CSS class to be used to add to the selected element.",
        "type": "string",
        "default": "'core-selected'",
        "title": "Selected class"
      },
      "selectedProperty": {
        "name": "selectedProperty",
        "description": "Specifies the property to be used to set on the selected element\nto indicate its active state.",
        "type": "string",
        "default": "''",
        "title": "Selected property"
      },
      "selectedAttribute": {
        "name": "selectedAttribute",
        "description": "Specifies the attribute to set on the selected element to indicate\nits active state.",
        "type": "string",
        "default": "'active'",
        "title": "Selected attribute"
      },
      "selectedItem": {
        "name": "selectedItem",
        "description": "Returns the currently selected element. In multi-selection this returns\nan array of selected elements.\nNote that you should not use this to set the selection. Instead use\n`selected`.",
        "type": "Object",
        "default": "null",
        "title": "Selected item"
      },
      "selectedModel": {
        "name": "selectedModel",
        "description": "In single selection, this returns the model associated with the\nselected element.\nNote that you should not use this to set the selection. Instead use \n`selected`.",
        "type": "Object",
        "default": "null",
        "title": "Selected model"
      },
      "selectedIndex": {
        "name": "selectedIndex",
        "description": "In single selection, this returns the selected index.\nNote that you should not use this to set the selection. Instead use\n`selected`.",
        "type": "number",
        "default": "-1",
        "title": "Selected index"
      },
      "excludedLocalNames": {
        "name": "excludedLocalNames",
        "description": "Nodes with local name that are in the list will not be included \nin the selection items.  In the following example, `items` returns four\n`core-item`'s and doesn't include `h3` and `hr`.\n\n    <core-selector excludedLocalNames=\"h3 hr\">\n      <h3>Header</h3>\n      <core-item>Item1</core-item>\n      <core-item>Item2</core-item>\n      <hr>\n      <core-item>Item3</core-item>\n      <core-item>Item4</core-item>\n    </core-selector>",
        "type": "string",
        "default": "''",
        "title": "Excluded local names"
      },
      "target": {
        "name": "target",
        "description": "The target element that contains items.  If this is not set \ncore-selector is the container.",
        "type": "Object",
        "default": "null",
        "title": "Target"
      },
      "itemsSelector": {
        "name": "itemsSelector",
        "description": "This can be used to query nodes from the target node to be used for \nselection items.  Note this only works if `target` is set\nand is not `core-selector` itself.\n\nExample:\n\n    <core-selector target=\"{{$.myForm}}\" itemsSelector=\"input[type=radio]\"></core-selector>\n    <form id=\"myForm\">\n      <label><input type=\"radio\" name=\"color\" value=\"red\"> Red</label> <br>\n      <label><input type=\"radio\" name=\"color\" value=\"green\"> Green</label> <br>\n      <label><input type=\"radio\" name=\"color\" value=\"blue\"> Blue</label> <br>\n      <p>color = {{color}}</p>\n    </form>",
        "type": "string",
        "default": "''",
        "title": "Items selector"
      },
      "activateEvent": {
        "name": "activateEvent",
        "description": "The event that would be fired from the item element to indicate\nit is being selected.",
        "type": "string",
        "default": "'tap'",
        "title": "Activate event"
      },
      "notap": {
        "name": "notap",
        "description": "Set this to true to disallow changing the selection via the\n`activateEvent`.",
        "type": "boolean",
        "default": "false",
        "title": "Notap"
      },
      "selectPrevious": {
        "name": "selectPrevious",
        "description": "Selects the previous item. This should be used in single selection only.\n\n                 wrap to the end",
        "title": "Select previous",
        "async": true,
        "type": "object",
        "properties": {
          "wrapped": {
            "type": "boolean",
            "name": "wrapped",
            "description": "if true and it is already at the first item,",
            "title": "Wrapped"
          }
        }
      },
      "selectNext": {
        "name": "selectNext",
        "description": "Selects the next item.  This should be used in single selection only.\n\n                 wrap to the front",
        "title": "Select next",
        "async": true,
        "type": "object",
        "properties": {
          "wrapped": {
            "type": "boolean",
            "name": "wrapped",
            "description": "if true and it is already at the last item,",
            "title": "Wrapped"
          }
        }
      }
    },
    "output": {
      "core-select": {
        "name": "core-select",
        "description": "Fired when an item's selection state is changed. This event is fired both\nwhen an item is selected or deselected. The `isSelected` detail property\ncontains the selection state.",
        "title": "Core select",
        "type": "object",
        "properties": {
          "detail.isSelected": {
            "type": "boolean",
            "name": "detail.isSelected",
            "description": "true for selection and false for deselection",
            "title": "Detail.is selected"
          },
          "detail.item": {
            "type": "Object",
            "name": "detail.item",
            "description": "the item element",
            "title": "Detail.item"
          }
        }
      },
      "core-activate": {
        "name": "core-activate",
        "description": "Fired when an item element is tapped.",
        "title": "Core activate",
        "type": "object",
        "properties": {
          "detail.item": {
            "type": "Object",
            "name": "detail.item",
            "description": "the item element",
            "title": "Detail.item"
          }
        }
      }
    }
  }
}