{
  "name": "core-transition",
  "ns": "polymer",
  "type": "polymer",
  "description": "\n\n`<core-transition>` is an abstraction of an animation. It is used to implement pluggable\ntransitions, for example in `<core-overlay>`. You can extend this class to create a custom\nanimation, instantiate it, and import it where you need the animation.\n\nAll instances of `<core-transition>` are stored in a single database with `type=transition`.\nFor more about the database, please see the documentation for `<core-meta>`.\n\nEach instance of `<core-transition>` objects are shared across all the clients, so you should\nnot store state information specific to the animated element in the transition. Rather, store\nit on the element.\n\nExample:\n\nmy-transition.html:\n\n    <polymer-element name=\"my-transition\" extends=\"core-transition\">\n        <script>\n            go: function(node) {\n                node.style.transition = 'opacity 1s ease-out';\n                node.style.opacity = 0;\n            }\n        </script>\n    </polymer-element>\n\n    <my-transition id=\"my-fade-out\"></my-transition>\n\nmy-transition-demo.html:\n\n    <link href=\"components/core-meta/core-meta.html\" rel=\"import\">\n    <link href=\"my-transition.html\" rel=\"import\">\n\n    <div id=\"animate-me\"></div>\n\n    <script>\n        // Get the core-transition\n        var meta = document.createElement('core-meta');\n        meta.type = 'transition';\n        var transition = meta.byId('my-fade-out');\n\n        // Run the animation\n        var animated = document.getElementById('animate-me');\n        transition.go(animated);\n    </script>\n\n",
  "ports": {
    "input": {
      "go": {
        "name": "go",
        "description": "\nRun the animation.\n\n",
        "params": [
          {
            "type": "Node",
            "name": "node",
            "description": "The node to apply the animation on"
          },
          {
            "type": "Object",
            "name": "state",
            "description": "State info"
          }
        ]
      },
      "setup": {
        "name": "setup",
        "description": "\nSet up the animation. This may include injecting a stylesheet,\napplying styles, creating a web animations object, etc.. This\n\n",
        "params": [
          {
            "type": "Node",
            "name": "node",
            "description": "The animated node"
          }
        ]
      },
      "teardown": {
        "name": "teardown",
        "description": "\nTear down the animation.\n\n",
        "params": [
          {
            "type": "Node",
            "name": "node",
            "description": "The animated node"
          }
        ]
      },
      "complete": {
        "name": "complete",
        "description": "\nCalled when the animation completes. This function also fires the\n`core-transitionend` event.\n\n",
        "params": [
          {
            "type": "Node",
            "name": "node",
            "description": "The animated node"
          }
        ]
      },
      "listenOnce": {
        "name": "listenOnce",
        "description": "\nUtility function to listen to an event on a node once.\n\n",
        "params": [
          {
            "type": "Node",
            "name": "node",
            "description": "The animated node"
          },
          {
            "type": "string",
            "name": "event",
            "description": "Name of an event"
          },
          {
            "type": "Function",
            "name": "fn",
            "description": "Event handler"
          },
          {
            "type": "Array",
            "name": "args",
            "description": "Additional arguments to pass to `fn`"
          }
        ]
      }
    },
    "output": {
      "core-transitionend": {
        "name": "core-transitionend",
        "description": "\nFired when the animation finishes.\n\n",
        "params": [
          {
            "type": "Object",
            "name": "detail.node",
            "description": "The animated node"
          }
        ]
      }
    }
  }
}