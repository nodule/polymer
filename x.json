{
  "name": "polymer",
  "description": "Polymer for Chix",
  "version": "0.0.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/nodule/polymer.git"
  },
  "dependencies": {
    "dot-object": "^1.1.0",
    "glob": "^5.0.14",
    "underscore": "^1.8.3"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "resizableAttachedHandler": {
            "name": "resizableAttachedHandler",
            "description": "User must call from `attached` callback",
            "title": "Resizable attached handler",
            "async": true
          },
          "resizableDetachedHandler": {
            "name": "resizableDetachedHandler",
            "description": "User must call from `detached` callback",
            "title": "Resizable detached handler",
            "async": true
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "CoreResizable": "Polymer/CoreResizable#master"
        }
      },
      "description": "`Polymer.CoreResizable` and `Polymer.CoreResizer` are a set of mixins that can be used\n  in Polymer elements to coordinate the flow of resize events between \"resizers\" (elements\n  that control the size or hidden state of their children) and \"resizables\" (elements that\n  need to be notified when they are resized or un-hidden by their parents in order to take\n  action on their new measurements).\n\n  Elements that perform measurement should add the `Core.Resizable` mixin to their \n  Polymer prototype definition and listen for the `core-resize` event on themselves.\n  This event will be fired when they become showing after having been hidden,\n  when they are resized explicitly by a `CoreResizer`, or when the window has been resized.\n  Note, the `core-resize` event is non-bubbling.\n\n  `CoreResizable`'s must manually call the `resizableAttachedHandler` from the element's\n  `attached` callback and `resizableDetachedHandler` from the element's `detached`\n  callback.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core resizable",
      "name": "CoreResizable"
    },
    {
      "ports": {
        "input": {
          "keys": {
            "name": "keys",
            "description": "The set of key combinations that will be matched (in keys syntax).",
            "type": "string",
            "default": "",
            "title": "Keys"
          },
          "target": {
            "name": "target",
            "description": "The node that will fire keyboard events.\nDefault to this element's parentNode unless one is assigned",
            "type": "Node",
            "default": "this.parentNode",
            "title": "Target"
          }
        },
        "output": {
          "keys-pressed": {
            "name": "keys-pressed",
            "description": "Fired when a keycombo in `keys` is pressed.",
            "title": "Keys pressed",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "shift": {
                    "type": "boolean",
                    "name": "shift",
                    "description": "true if shift key is pressed",
                    "title": "Shift"
                  },
                  "ctrl": {
                    "type": "boolean",
                    "name": "ctrl",
                    "description": "true if ctrl key is pressed",
                    "title": "Ctrl"
                  },
                  "meta": {
                    "type": "boolean",
                    "name": "meta",
                    "description": "true if meta key is pressed",
                    "title": "Meta"
                  },
                  "alt": {
                    "type": "boolean",
                    "name": "alt",
                    "description": "true if alt key is pressed",
                    "title": "Alt"
                  },
                  "key": {
                    "type": "String",
                    "name": "key",
                    "description": "the normalized key",
                    "title": "Key"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-a11y-keys": "Polymer/core-a11y-keys#master"
        }
      },
      "description": "`core-a11y-keys` provides a normalized interface for processing keyboard commands that pertain to [WAI-ARIA best\npractices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding). The element takes care of browser differences\nwith respect to Keyboard events and uses an expressive syntax to filter key presses.\n\nUse the `keys` attribute to express what combination of keys will trigger the event to fire.\n\nUse the `target` attribute to set up event handlers on a specific node.\nThe `keys-pressed` event will fire when one of the key combinations set with the `keys` attribute is pressed.\n\nExample:\n\nThis element will call `arrowHandler` on all arrow keys:\n\n    <core-a11y-keys target=\"{{}}\" keys=\"up down left right\" on-keys-pressed=\"{{arrowHandler}}\"></core-a11y-keys>\n\nKeys Syntax:\n\nThe `keys` attribute can accepts a space seprated, `+` concatenated set of modifier keys and some common keyboard keys.\n\nThe common keys are `a-z`, `0-9` (top row and number pad), `*` (shift 8 and number pad), `F1-F12`, `Page Up`, `Page\nDown`, `Left Arrow`, `Right Arrow`, `Down Arrow`, `Up Arrow`, `Home`, `End`, `Escape`, `Space`, `Tab`, and `Enter` keys.\n\nThe modifier keys are `Shift`, `Control`, and `Alt`.\n\nAll keys are expected to be lowercase and shortened:\n`Left Arrow` is `left`, `Page Down` is `pagedown`, `Control` is `ctrl`, `F1` is `f1`, `Escape` is `esc` etc.\n\nKeys Syntax Example:\n\nGiven the `keys` attribute value \"ctrl+shift+f7 up pagedown esc space alt+m\", the `<core-a11y-keys>` element will send\nthe `keys-pressed` event if any of the follow key combos are pressed: Control and Shift and F7 keys, Up Arrow key, Page\nDown key, Escape key, Space key, Alt and M key.\n\nSlider Example:\n\nThe following is an example of the set of keys that fulfil the WAI-ARIA \"slider\" role [best\npractices](http://www.w3.org/TR/wai-aria-practices/#slider):\n\n    <core-a11y-keys target=\"{{}}\" keys=\"left pagedown down\" on-keys-pressed=\"{{decrement}}\"></core-a11y-keys>\n    <core-a11y-keys target=\"{{}}\" keys=\"right pageup up\" on-keys-pressed=\"{{increment}}\"></core-a11y-keys>\n    <core-a11y-keys target=\"{{}}\" keys=\"home\" on-keys-pressed=\"{{setMin}}\"></core-a11y-keys>\n    <core-a11y-keys target=\"{{}}\" keys=\"end\" on-keys-pressed=\"{{setMax}}\"></core-a11y-keys>\n\nThe `increment` function will move the slider a set amount toward the maximum value.\nThe `decrement` function will move the slider a set amount toward the minimum value.\nThe `setMin` function will move the slider to the minimum value.\nThe `setMax` function will move the slider to the maximum value.\n\nKeys Syntax Grammar:\n\n[EBNF](http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form) Grammar of the `keys` attribute.\n\n    modifier = \"shift\" | \"ctrl\" | \"alt\";\n    ascii = ? /[a-z0-9]/ ? ;\n    fnkey = ? f1 through f12 ? ;\n    arrow = \"up\" | \"down\" | \"left\" | \"right\" ;\n    key = \"tab\" | \"esc\" | \"space\" | \"*\" | \"pageup\" | \"pagedown\" | \"home\" | \"end\" | arrow | ascii | fnkey ;\n    keycombo = { modifier, \"+\" }, key ;\n    keys = keycombo, { \" \", keycombo } ;",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core a11y keys",
      "name": "core-a11y-keys"
    },
    {
      "ports": {
        "input": {
          "url": {
            "name": "url",
            "description": "The URL target of the request.",
            "type": "string",
            "default": "",
            "title": "Url"
          },
          "handleAs": {
            "name": "handleAs",
            "description": "Specifies what data to store in the `response` property, and\nto deliver as `event.response` in `response` events.\n\nOne of:\n\n   `text`: uses `XHR.responseText`.\n\n   `xml`: uses `XHR.responseXML`.\n\n   `json`: uses `XHR.responseText` parsed as JSON.\n\n   `arraybuffer`: uses `XHR.response`.\n\n   `blob`: uses `XHR.response`.\n\n   `document`: uses `XHR.response`.",
            "type": "string",
            "default": "text",
            "title": "Handle as"
          },
          "auto": {
            "name": "auto",
            "description": "If true, automatically performs an Ajax request when either `url` or `params` changes.",
            "type": "boolean",
            "default": false,
            "title": "Auto"
          },
          "params": {
            "name": "params",
            "description": "Parameters to send to the specified URL, as JSON.",
            "type": "string",
            "default": "",
            "title": "Params"
          },
          "response": {
            "name": "response",
            "description": "The response for the current request, or null if it hasn't\ncompleted yet or the request resulted in error.",
            "type": "Object",
            "default": null,
            "title": "Response"
          },
          "error": {
            "name": "error",
            "description": "The error for the current request, or null if it hasn't\ncompleted yet or the request resulted in success.",
            "type": "Object",
            "default": null,
            "title": "Error"
          },
          "loading": {
            "name": "loading",
            "description": "Whether the current request is currently loading.",
            "type": "boolean",
            "default": false,
            "title": "Loading"
          },
          "progress": {
            "name": "progress",
            "description": "The progress of the current request.",
            "type": "{loaded: number, total: number, lengthComputable: boolean}",
            "default": "{}",
            "title": "Progress"
          },
          "method": {
            "name": "method",
            "description": "The HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.\nDefault is 'GET'.",
            "type": "string",
            "default": "",
            "title": "Method"
          },
          "headers": {
            "name": "headers",
            "description": "HTTP request headers to send.\n\nExample:\n\n    <core-ajax\n        auto\n        url=\"http://somesite.com\"\n        headers='{\"X-Requested-With\": \"XMLHttpRequest\"}'\n        handleAs=\"json\"\n        on-core-response=\"{{handleResponse}}\"></core-ajax>",
            "type": "Object",
            "default": null,
            "title": "Headers"
          },
          "body": {
            "name": "body",
            "description": "Optional raw body content to send when method === \"POST\".\n\nExample:\n\n    <core-ajax method=\"POST\" auto url=\"http://somesite.com\"\n        body='{\"foo\":1, \"bar\":2}'>\n    </core-ajax>",
            "type": "Object",
            "default": null,
            "title": "Body"
          },
          "contentType": {
            "name": "contentType",
            "description": "Content type to use when sending data.",
            "type": "string",
            "default": "application/x-www-form-urlencoded",
            "title": "Content type"
          },
          "withCredentials": {
            "name": "withCredentials",
            "description": "Set the withCredentials flag on the request.",
            "type": "boolean",
            "default": false,
            "title": "With credentials"
          },
          "go": {
            "name": "go",
            "description": "Performs an Ajax request to the specified URL.",
            "title": "Go",
            "async": true
          },
          "abort": {
            "name": "abort",
            "description": "Aborts the current active request if there is one and resets internal\nstate appropriately.",
            "title": "Abort",
            "async": true
          }
        },
        "output": {
          "core-response": {
            "name": "core-response",
            "description": "Fired when a response is received.",
            "title": "Core response"
          },
          "core-error": {
            "name": "core-error",
            "description": "Fired when an error is received.",
            "title": "Core error"
          },
          "core-complete": {
            "name": "core-complete",
            "description": "Fired whenever a response or an error is received.",
            "title": "Core complete"
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-ajax": "Polymer/core-ajax#master"
        }
      },
      "description": "The `core-ajax` element exposes `XMLHttpRequest` functionality.\n\n    <core-ajax\n        auto\n        url=\"http://gdata.youtube.com/feeds/api/videos/\"\n        params='{\"alt\":\"json\", \"q\":\"chrome\"}'\n        handleAs=\"json\"\n        on-core-response=\"{{handleResponse}}\"></core-ajax>\n\nWith `auto` set to `true`, the element performs a request whenever\nits `url`, `params` or `body` properties are changed.\n\nNote: The `params` attribute must be double quoted JSON.\n\nYou can trigger a request explicitly by calling `go` on the\nelement.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core ajax",
      "name": "core-ajax"
    },
    {
      "ports": {
        "input": {
          "transitions": {
            "name": "transitions",
            "description": "A space-delimited string of transitions to use when switching between pages in this element.\nThe strings are `id`s of `core-transition-pages` elements included elsewhere. See the\nindividual transition's document for specific details.",
            "type": "string",
            "default": "",
            "title": "Transitions"
          },
          "lastSelected": {
            "name": "lastSelected",
            "description": "The last page selected. This property is useful to dynamically set transitions based\non incoming and outgoing pages.",
            "type": "Object",
            "default": null,
            "title": "Last selected"
          }
        },
        "output": {
          "core-animated-pages-transition-prepare": {
            "name": "core-animated-pages-transition-prepare",
            "description": "Fired before a page transition occurs. Both pages involved in the transition are visible when\nthis event fires. This is useful if there is something the client needs to do when a page becomes\nvisible.",
            "title": "Core animated pages transition prepare"
          },
          "core-animated-pages-transition-end": {
            "name": "core-animated-pages-transition-end",
            "description": "Fired when a page transition completes.",
            "title": "Core animated pages transition end"
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-animated-pages": "Polymer/core-animated-pages#master"
        }
      },
      "description": "`core-animated-pages` selects one of its children \"pages\" to show and runs a transition\nwhen switching between them. The transitions are designed to be pluggable, and can\naccept any object that is an instance of a `core-transition-pages`. Transitions to run\nare specified in the `transitions` attribute as a space-delimited string of `id`s of\ntransition elements. Several transitions are available with `core-animated-pages` by\ndefault, including `hero-transition`, `cross-fade`, and `tile-cascade`.\n\nExample:\n\n    <style>\n      #hero1 {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 300px;\n        height: 300px;\n        background-color: orange;\n      }\n      #hero2 {\n        position: absolute;\n        top: 200px;\n        left: 300px;\n        width: 300px;\n        height: 300px;\n        background-color: orange;\n      }\n      #bottom1, #bottom2 {\n        position: absolute;\n        bottom: 0;\n        top: 0;\n        left: 0;\n        height: 50px;\n      }\n      #bottom1 {\n        background-color: blue;\n      }\n      #bottom2 {\n        background-color: green;\n      }\n    </style>\n    // hero-transition and cross-fade are declared elsewhere\n    <core-animated-pages transitions=\"hero-transition cross-fade\">\n      <section id=\"page1\">\n        <div id=\"hero1\" hero-id=\"hero\" hero></div>\n        <div id=\"bottom1\" cross-fade></div>\n      </section>\n      <section id=\"page2\">\n        <div id=\"hero2\" hero-id=\"hero\" hero></div>\n        <div id=\"bottom2\" cross-fade></div>\n      </section>\n    </core-animated-pages>\n\nIn the above example, two transitions (`hero-transition` and `cross-fade`) are run when switching\nbetween `page1` and `page2`. `hero-transition` transforms elements with the same `hero-id` such\nthat they appear to be shared across different pages. `cross-fade` fades out the elements marked\n`cross-fade` in the outgoing page, and fades in those in the incoming page. See the individual\ntransition's documentation for specific details.\n\nFinding elements to transition\n------------------------------\n\nIn general, a transition is applied to elements marked with a certain attribute. For example,\n`hero-transition` applies the transition on elements with the `hero` and `hero-id` attribute.\nAmong the transitions included with `core-animated-pages`, script-based transitions such as\n`hero-transition` generally look for elements up to one level of shadowRoot from the\n`core-animated-pages` element, and CSS-based transitions such as `cross-fade` look for elements\nwithin any shadowRoot within the `core-animated-pages` element. This means you can use \ncustom elements as pages and mark elements in their shadowRoots as heroes, or mark \nelements in deeper shadowRoots with other transitions.\n\nExample:\n\n    <polymer-element name=\"x-el\" noscript>\n    <template>\n      <style>\n        #hero {\n          position: absolute;\n          top: 0;\n          right: 0;\n          width: 50px;\n          height: 300px;\n          background-color: blue;\n        }\n      </style>\n      <div id=\"hero\" hero-id=\"bar\" hero></div>\n    </template>\n    </polymer-element>\n\n    <polymer-element name=\"x-page-1\" noscript>\n    <template>\n      <style>\n        #hero1 {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 300px;\n          height: 300px;\n          background-color: orange;\n        }\n      </style>\n      <div id=\"hero1\" hero-id=\"foo\" hero></div>\n      <div id=\"hero2\" hero-id=\"bar\" hero></div>\n    </template>\n    </polymer-element>\n\n    <polymer-element name=\"x-page-2\" noscript>\n    <template>\n      <style>\n        #hero1 {\n          position: absolute;\n          top: 200px;\n          left: 300px;\n          width: 300px;\n          height: 300px;\n          background-color: orange;\n        }\n        #hero2 {\n          background-color: blue;\n          height: 150px;\n          width: 400px;\n        }\n      </style>\n      // The below element is one level of shadow from the core-animated-pages and will\n      // be transitioned.\n      <div id=\"hero1\" hero-id=\"foo\" hero></div>\n      // The below element contains a hero inside its shadowRoot making it two levels away\n      // from the core-animated-pages, and will not be transitioned.\n      <x-el></x-el>\n    </template>\n    </polymer-element>\n\n    <core-animated-pages transitions=\"hero-transition\">\n      <x-page-1></x-page-1>\n      <x-page-2></x-page-2>\n    </core-animated-pages>\n\nNote that the container element of the page does not participate in the transition.\n\n    // This does not work\n    <core-animated-pages transitions=\"cross-fade\">\n      <section cross-fade></section>\n      <section cross-fade></section>\n    </core-animated-pages>\n\n    // This works\n    <core-animated-pages transitions=\"cross-fade\">\n      <section>\n        <div cross-fade></div>\n      </section>\n      <section>\n        <div cross-fade></div>\n      </section>\n    </core-animated-pages>\n\nDynamically setting up transitions\n----------------------------------\n\nAn easy way to set up transitions dynamically is to use property binding on\nthe transition attributes. \n\nExample:\n\n    <core-animated-pages selected=\"{{selected}}\">\n      <section id=\"page1\">\n        <div hero-id=\"hero\" hero></div>\n      </section>\n      <section id=\"page2\">\n        <div id=\"foo\" hero-id=\"hero\" hero?=\"{{selected === 1 || selected === 0}}\" cross-fade=\"{{selected === 2}}\"></div>\n      </section>\n      <section id=\"page3\">\n      </section>\n    </core-animated-pages>\n\nIn the above example, the \"foo\" element only behaves as a hero element if transitioning between\n`#page1` and `#page2`. It gets cross-faded when transition to or from `#page3`.\n\nNesting pages\n-------------\n\nIt is possible to nest core-animated-pages elements for organization. Excessive nesting is\nnot encouraged, however, since it makes setting up the transition more complex.\n\nTo nest core-animated-pages, the page containing the nested core-animated-pages element should\nhave a `selectedItem` property bound to the `selectedItem` property of the nested element. This\nwill allow the outer core-animated-pages to know which nested page it is actually transitioning\nto.\n\nExample:\n\n    <polymer-element name=\"nested-page\" attributes=\"selectedItem\">\n    <template>\n      <core-animated-pages selectedItem=\"{{selectedItem}}\">\n        ...\n      </core-animated-pages>\n    </template>\n    </polymer-element>\n\n    <core-animated-pages>\n      <section id=\"page1\"></section>\n      <nested-page id=\"page2\"></nested-page>\n    </core-animated-pages>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core animated pages",
      "name": "core-animated-pages"
    },
    {
      "ports": {
        "input": {
          "play": {
            "name": "play",
            "description": "Plays the animation. If the animation is currently paused, seeks the animation\nto the beginning before starting playback.",
            "title": "Play",
            "async": true
          },
          "cancel": {
            "name": "cancel",
            "description": "Stops the animation and clears all effects on the target.",
            "title": "Cancel",
            "async": true
          },
          "finish": {
            "name": "finish",
            "description": "Seeks the animation to the end.",
            "title": "Finish",
            "async": true
          },
          "pause": {
            "name": "pause",
            "description": "Pauses the animation.",
            "title": "Pause",
            "async": true
          },
          "hasTarget": {
            "name": "hasTarget",
            "description": "",
            "title": "Has target",
            "async": true
          },
          "apply": {
            "name": "apply",
            "description": "Creates a web animations object based on this object's properties, and\nplays it if autoplay is true.",
            "title": "Apply",
            "async": true
          }
        },
        "output": {
          "core-animation-finish": {
            "name": "core-animation-finish",
            "description": "Fired when the animation completes.",
            "title": "Core animation finish"
          },
          "core-animation-change": {
            "name": "core-animation-change",
            "description": "Fired when the web animation object changes.",
            "title": "Core animation change"
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-animation": "Polymer/core-animation#master"
        }
      },
      "description": "`core-animation` is a convenience element to use web animations with Polymer elements. It\nallows you to create a web animation declaratively. You can extend this class to create\nnew types of animations and combine them with `core-animation-group`.\n\nExample to create animation to fade out an element over 500ms:\n\n    <core-animation id=\"fadeout\" duration=\"500\">\n      <core-animation-keyframe>\n        <core-animation-prop name=\"opacity\" value=\"1\"></core-animation-prop>\n      </core-animation-keyframe>\n      <core-animation-keyframe>\n        <core-animation-prop name=\"opacity\" value=\"0\"></core-animation-prop>\n      </core-animation-keyframe>\n    </core-animation>\n\n    <div id=\"el\">Fade me out</div>\n\n    <script>\n      var animation = document.getElementById('fadeout');\n      animation.target = document.getElementById('el');\n      animation.play();\n    </script>\n\nOr do the same imperatively:\n\n    var animation = new CoreAnimation();\n    animation.duration = 500;\n    animation.keyframes = [\n      {opacity: 1},\n      {opacity: 0}\n    ];\n    animation.target = document.getElementById('el');\n    animation.play();\n\nYou can also provide a javascript function instead of keyframes to the animation. This\nbehaves essentially the same as `requestAnimationFrame`:\n\n    var animation = new CoreAnimation();\n    animation.customEffect = function(timeFraction, target, animation) {\n      // do something custom\n    };\n    animation.play();\n\nElements that are targets to a `core-animation` are given the `core-animation-target` class.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core animation",
      "name": "core-animation"
    },
    {
      "ports": {
        "input": {
          "target": {
            "name": "target",
            "description": "The target element that will be opened when the `core-collapse` is\nopened. If unspecified, the `core-collapse` itself is the target.",
            "type": "Object",
            "default": null,
            "title": "Target"
          },
          "horizontal": {
            "name": "horizontal",
            "description": "If true, the orientation is horizontal; otherwise is vertical.",
            "type": "boolean",
            "default": false,
            "title": "Horizontal"
          },
          "opened": {
            "name": "opened",
            "description": "Set opened to true to show the collapse element and to false to hide it.",
            "type": "boolean",
            "default": false,
            "title": "Opened"
          },
          "duration": {
            "name": "duration",
            "description": "Collapsing/expanding animation duration in second.",
            "type": "number",
            "default": 0,
            "title": "Duration"
          },
          "fixedSize": {
            "name": "fixedSize",
            "description": "If true, the size of the target element is fixed and is set\non the element.  Otherwise it will try to\nuse auto to determine the natural size to use\nfor collapsing/expanding.",
            "type": "boolean",
            "default": false,
            "title": "Fixed size"
          },
          "allowOverflow": {
            "name": "allowOverflow",
            "description": "By default the collapsible element is set to overflow hidden. This helps\navoid element bleeding outside the region and provides consistent overflow\nstyle across opened and closed states. Set this property to true to allow\nthe collapsible element to overflow when it's opened.",
            "type": "boolean",
            "default": false,
            "title": "Allow overflow"
          },
          "toggle": {
            "name": "toggle",
            "description": "Toggle the opened state.",
            "title": "Toggle",
            "async": true
          }
        },
        "output": {
          "core-collapse-open": {
            "name": "core-collapse-open",
            "description": "Fired when the `core-collapse`'s `opened` property changes.",
            "title": "Core collapse open"
          },
          "core-resize": {
            "name": "core-resize",
            "description": "Fired when the target element has been resized as a result of the opened\nstate changing.",
            "title": "Core resize"
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-collapse": "Polymer/core-collapse#master"
        }
      },
      "description": "`core-collapse` creates a collapsible block of content.  By default, the content\nwill be collapsed.  Use `opened` or `toggle()` to show/hide the content.\n\n    <button on-click=\"{{toggle}}\">toggle collapse</button>\n\n    <core-collapse id=\"collapse\">\n      Content goes here...\n    </core-collapse>\n\n    ...\n\n    toggle: function() {\n      this.$.collapse.toggle();\n    }\n\n`core-collapse` adjusts the height/width of the collapsible element to show/hide\nthe content.  So avoid putting padding/margin/border on the collapsible directly,\nand instead put a div inside and style that.\n\n    <style>\n      .collapse-content {\n        padding: 15px;\n        border: 1px solid #dedede;\n      }\n    </style>\n\n    <core-collapse>\n      <div class=\"collapse-content\">\n        Content goes here...\n      </div>\n    </core-collapse>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core collapse",
      "name": "core-collapse"
    },
    {
      "ports": {
        "input": {
          "url": {
            "name": "url",
            "description": "A single file to parse for docs",
            "type": "String",
            "default": "''",
            "title": "Url"
          },
          "sources": {
            "name": "sources",
            "description": "Files to parse for docs",
            "type": "Array",
            "default": "[]",
            "title": "Sources"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-doc-viewer": "Polymer/core-doc-viewer#master"
        }
      },
      "description": "Displays formatted source documentation scraped from input urls.\n\nDocumentation can be encoded into html comments (&lt;!-- ... --&gt;) or using JsDoc notation (/&#42;&#42; ... &#42;/).\n\nWhen using JsDoc notation, remember that the left-margin includes an asterisk and a single space.\nThis is important for markdown constructs that count spaces. Code blocks for example, must be\nfive spaces from the first asterisk.\n\n## Markdown\n\nMarkdown format is supported.\n\n### Links\n\nArbitrary links can be encoded using [standard markdown format](http://daringfireball.net/projects/markdown/syntax). \n[GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown) is also supported.\n\nLinks to other topics can be made with hash-links [core-doc-viewer](#core-doc-viewer).\n\n### Code\n\nExample\n\n    Four space indents indicate code blocks.\n    \n    <code>blocks are syntax highlighted</code>\n    \n    <script>\n      while(true) {\n        javascript('is highlighted also');\n      }\n    </script>\n\n### Blockquote\n\n > Blockquote is supported for long text that needs to wrap with a common left side indent.\n > Blockquote is supported for long text that needs to wrap with a common left side indent.  \n\n### Lists\n \n1.  enumerated\n1.  lists\n \nUse - or + for bullet points:\n \n- bullet\n- lists\n\n### Tables\n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n### HTML\n\nArbitrary HTML is also supported\n\n<input><button>Button</button><hr/>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core doc viewer",
      "name": "core-doc-viewer"
    },
    {
      "ports": {
        "input": {
          "drawerWidth": {
            "name": "drawerWidth",
            "description": "Width of the drawer panel.",
            "type": "string",
            "default": "256px",
            "title": "Drawer width"
          },
          "responsiveWidth": {
            "name": "responsiveWidth",
            "description": "Max-width when the panel changes to narrow layout.",
            "type": "string",
            "default": "640px",
            "title": "Responsive width"
          },
          "selected": {
            "name": "selected",
            "description": "The panel that is being selected. `drawer` for the drawer panel and\n`main` for the main panel.",
            "type": "string",
            "default": null,
            "title": "Selected"
          },
          "defaultSelected": {
            "name": "defaultSelected",
            "description": "The panel to be selected when `core-drawer-panel` changes to narrow\nlayout.",
            "type": "string",
            "default": "main",
            "title": "Default selected"
          },
          "narrow": {
            "name": "narrow",
            "description": "Returns true if the panel is in narrow layout.  This is useful if you\nneed to show/hide elements based on the layout.",
            "type": "boolean",
            "default": false,
            "title": "Narrow"
          },
          "rightDrawer": {
            "name": "rightDrawer",
            "description": "If true, position the drawer to the right.",
            "type": "boolean",
            "default": false,
            "title": "Right drawer"
          },
          "disableSwipe": {
            "name": "disableSwipe",
            "description": "If true, swipe to open/close the drawer is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Disable swipe"
          },
          "forceNarrow": {
            "name": "forceNarrow",
            "description": "If true, ignore `responsiveWidth` setting and force the narrow layout.",
            "type": "boolean",
            "default": false,
            "title": "Force narrow"
          },
          "disableEdgeSwipe": {
            "name": "disableEdgeSwipe",
            "description": "If true, swipe from the edge is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Disable edge swipe"
          },
          "togglePanel": {
            "name": "togglePanel",
            "description": "Toggles the panel open and closed.",
            "title": "Toggle panel",
            "async": true
          },
          "openDrawer": {
            "name": "openDrawer",
            "description": "Opens the drawer.",
            "title": "Open drawer",
            "async": true
          },
          "closeDrawer": {
            "name": "closeDrawer",
            "description": "Closes the drawer.",
            "title": "Close drawer",
            "async": true
          }
        },
        "output": {
          "core-responsive-change": {
            "name": "core-responsive-change",
            "description": "Fired when the narrow layout changes.",
            "title": "Core responsive change",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "narrow": {
                    "type": "boolean",
                    "name": "narrow",
                    "description": "true if the panel is in narrow layout.",
                    "title": "Narrow"
                  }
                }
              }
            }
          },
          "core-select": {
            "name": "core-select",
            "description": "Fired when the selected panel changes.\n\nListening for this event is an alternative to observing changes in the `selected` attribute.\nThis event is fired both when a panel is selected and deselected.\nThe `isSelected` detail property contains the selection state.",
            "title": "Core select",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "isSelected": {
                    "type": "boolean",
                    "name": "isSelected",
                    "description": "true for selection and false for deselection",
                    "title": "Is selected"
                  },
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the panel that the event refers to",
                    "title": "Item"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-drawer-panel": "Polymer/core-drawer-panel#master"
        }
      },
      "description": "`core-drawer-panel` contains a drawer panel and a main panel.  The drawer\nand the main panel are side-by-side with drawer on the left.  When the browser\nwindow size is smaller than the `responsiveWidth`, `core-drawer-panel`\nchanges to narrow layout.  In narrow layout, the drawer will be stacked on top\nof the main panel.  The drawer will slide in/out to hide/reveal the main\npanel.\n\nUse the attribute `drawer` to indicate that the element is the drawer panel and\n`main` to indicate that the element is the main panel.\n\nExample:\n\n    <core-drawer-panel>\n      <div drawer> Drawer panel... </div>\n      <div main> Main panel... </div>\n    </core-drawer-panel>\n\nThe drawer and the main panels are not scrollable.  You can set CSS overflow\nproperty on the elements to make them scrollable or use `core-header-panel`.\n\nExample:\n\n    <core-drawer-panel>\n      <core-header-panel drawer>\n        <core-toolbar></core-toolbar>\n        <div> Drawer content... </div>\n      </core-header-panel>\n      <core-header-panel main>\n        <core-toolbar></core-toolbar>\n        <div> Main content... </div>\n      </core-header-panel>\n    </core-drawer-panel>\n\nAn element that should toggle the drawer will automatically do so if it's \ngiven the `core-drawer-toggle` attribute.  Also this element will automatically\nbe hidden in wide layout.\n\nExample:\n\n    <core-drawer-panel>\n      <core-header-panel drawer>\n        <core-toolbar>\n          <div>Application</div>\n        </core-toolbar>\n        <div> Drawer content... </div>\n      </core-header-panel>\n      <core-header-panel main>\n        <core-toolbar>\n          <core-icon-button icon=\"menu\" core-drawer-toggle></core-icon-button>\n          <div>Title</div>\n        </core-toolbar>\n        <div> Main content... </div>\n      </core-header-panel>\n    </core-drawer-panel>\n\nTo position the drawer to the right, add `rightDrawer` attribute.\n\n    <core-drawer-panel rightDrawer>\n      <div drawer> Drawer panel... </div>\n      <div main> Main panel... </div>\n    </core-drawer-panel>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core drawer panel",
      "name": "core-drawer-panel"
    },
    {
      "ports": {
        "input": {
          "opened": {
            "name": "opened",
            "description": "True if the menu is open.",
            "type": "boolean",
            "default": false,
            "title": "Opened"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-dropdown-base": "Polymer/core-dropdown-base#master"
        }
      },
      "description": "`core-dropdown-base` is a base class for implementing controls that displays\nan overlay when tapped on.\n\nThe child element with the class `dropdown` will be used as the drop-down. It\nshould be a `core-dropdown` or other overlay element.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core dropdown base",
      "name": "core-dropdown-base"
    },
    {
      "ports": {
        "input": {
          "label": {
            "name": "label",
            "description": "A label for the control. The label is displayed if no item is selected.",
            "type": "string",
            "default": "Select an item",
            "title": "Label"
          },
          "openedIcon": {
            "name": "openedIcon",
            "description": "The icon to display when the drop-down is opened.",
            "type": "string",
            "default": "arrow-drop-up",
            "title": "Opened icon"
          },
          "closedIcon": {
            "name": "closedIcon",
            "description": "The icon to display when the drop-down is closed.",
            "type": "string",
            "default": "arrow-drop-down",
            "title": "Closed icon"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-dropdown-menu": "Polymer/core-dropdown-menu#master"
        }
      },
      "description": "`core-dropdown-menu` works together with `core-dropdown` and `core-selector` to\nimplement a drop-down menu. The currently selected item is displayed in the\ncontrol. If no item is selected, the `label` is displayed instead.\n\nThe child element with the class `dropdown` will be used as the drop-down\nmenu. It should be a `core-dropdown` or other overlay element. You should\nalso provide a `core-selector` or other selector element, such as `core-menu`,\nin the drop-down.\n\nExample:\n\n    <core-dropdown-menu label=\"Choose a pastry\">\n        <core-dropdown class=\"dropdown\">\n            <core-selector>\n              <core-item label=\"Croissant\"></core-item>\n              <core-item label=\"Donut\"></core-item>\n              <core-item label=\"Financier\"></core-item>\n              <core-item label=\"Madeleine\"></core-item>\n            </core-selector>\n        </core-dropdown>\n    </core-dropdown-menu>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core dropdown menu",
      "name": "core-dropdown-menu"
    },
    {
      "ports": {
        "input": {
          "relatedTarget": {
            "name": "relatedTarget",
            "description": "The element associated with this dropdown, usually the element that triggers\nthe menu. If unset, this property will default to the target's parent node\nor shadow host.",
            "type": "Node",
            "title": "Related target"
          },
          "halign": {
            "name": "halign",
            "description": "The horizontal alignment of the popup relative to `relatedTarget`. `left`\nmeans the left edges are aligned together. `right` means the right edges\nare aligned together.",
            "type": "'left' | 'right'",
            "default": "'left'",
            "title": "Halign"
          },
          "valign": {
            "name": "valign",
            "description": "The vertical alignment of the popup relative to `relatedTarget`. `top` means\nthe top edges are aligned together. `bottom` means the bottom edges are\naligned together.",
            "type": "'top' | 'bottom'",
            "default": "'top'",
            "title": "Valign"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-dropdown": "Polymer/core-dropdown#master"
        }
      },
      "description": "`core-dropdown` is an element that is initially hidden and is positioned relatively to another\nelement, usually the element that triggers the dropdown. The dropdown and the triggering element\nshould be children of the same offsetParent, e.g. the same `<div>` with `position: relative`.\nIt can be used to implement dropdown menus, menu buttons, etc..\n\nExample:\n\n    <template is=\"auto-binding\">\n      <div relative>\n        <core-icon-button id=\"trigger\" icon=\"menu\"></core-icon-button>\n        <core-dropdown relatedTarget=\"{{$.trigger}}\">\n          <core-menu>\n            <core-item>Cut</core-item>\n            <core-item>Copy</core-item>\n            <core-item>Paste</core-item>\n          </core-menu>\n        </core-dropdown>\n      </div>\n    </template>\n\nPositioning\n-----------\n\nBy default, the dropdown is absolutely positioned on top of the `relatedTarget` with the top and\nleft edges aligned. The `halign` and `valign` properties controls the various alignments. The size\nof the dropdown is automatically restrained such that it is entirely visible on the screen. Use the\n`margin`\n\nIf you need more control over the dropdown's position, use CSS. The `halign` and `valign` properties are\nignored if the dropdown is positioned with CSS.\n\nExample:\n\n    <style>\n      /* manually position the dropdown below the trigger */\n      core-dropdown {\n        position: absolute;\n        top: 38px;\n        left: 0;\n      }\n    </style>\n\n    <template is=\"auto-binding\">\n      <div relative>\n        <core-icon-button id=\"trigger\" icon=\"menu\"></core-icon-button>\n        <core-dropdown relatedTarget=\"{{$.trigger}}\">\n          <core-menu>\n            <core-item>Cut</core-item>\n            <core-item>Copy</core-item>\n            <core-item>Paste</core-item>\n          </core-menu>\n        </core-dropdown>\n      </div>\n    </template>\n\nThe `layered` property\n----------------------\n\nSometimes you may need to render the dropdown in a separate layer. For example,\nit may be nested inside an element that needs to be `overflow: hidden`, or\nits parent may be overlapped by elements above it in stacking order.\n\nThe `layered` property will place the dropdown in a separate layer to ensure\nit appears on top of everything else. Note that this implies the dropdown will\nnot scroll with its container.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core dropdown",
      "name": "core-dropdown"
    },
    {
      "ports": {
        "input": {
          "mode": {
            "name": "mode",
            "description": "Controls header and scrolling behavior. Options are\n`standard`, `seamed`, `waterfall`, `waterfall-tall`, `scroll` and \n`cover`. Default is `standard`.\n\n`standard`: The header is a step above the panel. The header will consume the\npanel at the point of entry, preventing it from passing through to the\nopposite side.\n\n`seamed`: The header is presented as seamed with the panel.\n\n`waterfall`: Similar to standard mode, but header is initially presented as\nseamed with panel, but then separates to form the step.\n\n`waterfall-tall`: The header is initially taller (`tall` class is added to\nthe header).  As the user scrolls, the header separates (forming an edge)\nwhile condensing (`tall` class is removed from the header).\n\n`scroll`: The header keeps its seam with the panel, and is pushed off screen.\n\n`cover`: The panel covers the whole `core-header-panel` including the\nheader. This allows user to style the panel in such a way that the panel is\npartially covering the header.\n\n    <style>\n      core-header-panel[mode=cover]::shadow #mainContainer {\n        left: 80px;\n      }\n      .content {\n        margin: 60px 60px 60px 0;\n      }\n    </style>\n\n    <core-header-panel mode=\"cover\">\n      <core-toolbar class=\"tall\">\n        <core-icon-button icon=\"menu\"></core-icon-button>\n      </core-toolbar>\n      <div class=\"content\"></div>\n    </core-header-panel>",
            "type": "string",
            "default": "",
            "title": "Mode"
          },
          "tallClass": {
            "name": "tallClass",
            "description": "The class used in waterfall-tall mode.  Change this if the header\naccepts a different class for toggling height, e.g. \"medium-tall\"",
            "type": "string",
            "default": "tall",
            "title": "Tall class"
          },
          "shadow": {
            "name": "shadow",
            "description": "If true, the drop-shadow is always shown no matter what mode is set to.",
            "type": "boolean",
            "default": false,
            "title": "Shadow"
          }
        },
        "output": {
          "scroll": {
            "name": "scroll",
            "description": "Fired when the content has been scrolled.  `event.detail.target` returns\nthe scrollable element which you can use to access scroll info such as\n`scrollTop`.\n\n    <core-header-panel on-scroll=\"{{scrollHandler}}\">\n      ...\n    </core-header-panel>\n\n\n    scrollHandler: function(event) {\n      var scroller = event.detail.target;\n      console.log(scroller.scrollTop);\n    }",
            "title": "Scroll"
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-header-panel": "Polymer/core-header-panel#master"
        }
      },
      "description": "`core-header-panel` contains a header section and a content panel section.\n\n__Important:__ The `core-header-panel` will not display if its parent does not have a height.\n\nUsing [layout attributes](http://www.polymer-project.org/docs/polymer/layout-attrs.html), you can easily make the `core-header-panel` fill the screen\n\n    <body fullbleed layout vertical>\n      <core-header-panel flex>\n        <core-toolbar>\n          <div>Hello World!</div>\n        </core-toolbar>\n      </core-header-panel>\n    </body>\n\nor, if you would prefer to do it in CSS, just give `html`, `body`, and `core-header-panel` a height of 100%:\n\n    html, body {\n      height: 100%;\n      margin: 0;\n    }\n    core-header-panel {\n      height: 100%;\n    }\n\nSpecial support is provided for scrolling modes when one uses a core-toolbar or equivalent\nfor the header section.\n\nExample:\n\n    <core-header-panel>\n      <core-toolbar>Header</core-toolbar>\n      <div>Content goes here...</div>\n    </core-header-panel>\n\nIf you want to use other than `core-toolbar` for the header, add\n`core-header` class to that element.\n\nExample:\n\n    <core-header-panel>\n      <div class=\"core-header\">Header</div>\n      <div>Content goes here...</div>\n    </core-header-panel>\n\nTo have the content fit to the main area, use `fit` attribute.\n\n    <core-header-panel>\n      <div class=\"core-header\">standard</div>\n      <div class=\"content\" fit>content fits 100% below the header</div>\n    </core-header-panel>\n\nUse `mode` to control the header and scrolling behavior.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core header panel",
      "name": "core-header-panel"
    },
    {
      "ports": {
        "input": {
          "src": {
            "name": "src",
            "description": "The URL of an image for the icon.  Should not use `icon` property\nif you are using this property.",
            "type": "string",
            "default": "",
            "title": "Src"
          },
          "active": {
            "name": "active",
            "description": "If true, border is placed around the button to indicate it's\nactive state.",
            "type": "boolean",
            "default": false,
            "title": "Active"
          },
          "icon": {
            "name": "icon",
            "description": "Specifies the icon name or index in the set of icons available in\nthe icon set.  Should not use `src` property if you are using this\nproperty.",
            "type": "string",
            "default": "",
            "title": "Icon"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-icon-button": "Polymer/core-icon-button#master"
        }
      },
      "description": "`core-icon-button` is an icon with button behaviors.\n\n    <core-icon-button src=\"star.png\"></core-icon-button>\n\n`core-icon-button` includes a default icon set.  Use `icon` to specify \nwhich icon from the icon set to use.\n\n    <core-icon-button icon=\"menu\"></core-icon-button>\n\nSee [`core-iconset`](#core-iconset) for more information about \nhow to use a custom icon set.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core icon button",
      "name": "core-icon-button"
    },
    {
      "ports": {
        "input": {
          "src": {
            "name": "src",
            "description": "The URL of an image for the icon. If the src property is specified,\nthe icon property should not be.",
            "type": "string",
            "default": "",
            "title": "Src"
          },
          "icon": {
            "name": "icon",
            "description": "Specifies the icon name or index in the set of icons available in\nthe icon's icon set. If the icon property is specified,\nthe src property should not be.",
            "type": "string",
            "default": "",
            "title": "Icon"
          },
          "alt": {
            "name": "alt",
            "description": "Alternative text content for accessibility support.\nIf alt is present and not empty, it will set the element's role to img and add an aria-label whose content matches alt.\nIf alt is present and is an empty string, '', it will hide the element from the accessibility layer\nIf alt is not present, it will set the element's role to img and the element will fallback to using the icon attribute for its aria-label.",
            "type": "string",
            "default": "",
            "title": "Alt"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-icon": "Polymer/core-icon#master"
        }
      },
      "description": "The `core-icon` element displays an icon. By default an icon renders as a 24px square.\n\nExample using src:\n\n    <core-icon src=\"star.png\"></core-icon>\n\nExample setting size to 32px x 32px:\n\n    <core-icon class=\"big\" src=\"big_star.png\"></core-icon>\n\n    <style>\n      .big {\n        height: 32px;\n        width: 32px;\n      }\n    </style>\n\nThe core elements include several sets of icons. \nTo use the default set of icons, import  `core-icons.html` and use the `icon` attribute to specify an icon:\n\n    <link rel=\"import\" href=\"/components/core-icons/core-icons.html\">\n\n    <core-icon icon=\"menu\"></core-icon>\n    \nTo use a different built-in set of icons, import  `core-icons/<iconset>-icons.html`, and\nspecify the icon as `<iconset>:<icon>`. For example:\n\n    <link rel=\"import\" href=\"/components/core-icons/communication-icons.html\">\n\n    <core-icon icon=\"communication:email\"></core-icon>\n    \nYou can also create custom icon sets of bitmap or SVG icons. \n\nExample of using an icon named `cherry` from a custom iconset with the ID `fruit`:\n\n    <core-icon icon=\"fruit:cherry\"></core-icon>\n\nSee [core-iconset](https://www.polymer-project.org/0.5/docs/elements/core-iconset.html) and [core-iconset-svg](https://www.polymer-project.org/0.5/docs/elements/core-iconset-svg.html) for more information about\nhow to create a custom iconset.\n\nSee [core-icons](https://www.polymer-project.org/0.5/components/core-icons/demo.html) for the default set of icons.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core icon",
      "name": "core-icon"
    },
    {
      "ports": {
        "input": {
          "iconSize": {
            "name": "iconSize",
            "description": "The size of an individual icon. Note that icons must be square.",
            "type": "number",
            "default": 24,
            "title": "Icon size"
          },
          "applyIcon": {
            "name": "applyIcon",
            "description": "Applies an icon to the given element. The svg icon is added to the\nelement's shadowRoot if one exists or directly to itself.\n\napplied.",
            "title": "Apply icon",
            "async": true,
            "type": "object",
            "properties": {
              "element": {
                "type": "Element",
                "name": "element",
                "description": "The element to which the icon is",
                "title": "Element"
              },
              "icon": {
                "type": "String|Number",
                "name": "icon",
                "description": "The name the icon to apply.",
                "title": "Icon"
              }
            }
          },
          "updateIcons": {
            "name": "updateIcons",
            "description": "Tell users of the iconset, that the set has loaded.\nThis finds all elements matching the selector argument and calls \nthe method argument on them.\ndefaults to '[icon]'\ndefaults to 'updateIcon'",
            "title": "Update icons",
            "async": true,
            "type": "object",
            "properties": {
              "css": {
                "type": "string",
                "name": "css",
                "description": "selector to identify iconset users, ",
                "title": "Css"
              },
              "method": {
                "type": "string",
                "name": "method",
                "description": "to call on found elements, ",
                "title": "Method"
              }
            }
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-iconset-svg": "Polymer/core-iconset-svg#master"
        }
      },
      "description": "The `core-iconset-svg` element allows users to define their own icon sets\nthat contain svg icons. The svg icon elements should be children of the\n`core-iconset-svg` element. Multiple icons should be given distinct id's.\n\nUsing svg elements to create icons has a few advantages over traditional\nbitmap graphics like jpg or png. Icons that use svg are vector based so they\nare resolution independent and should look good on any device. They are\nstylable via css. Icons can be themed, colorized, and even animated.\n\nExample:\n\n    <core-iconset-svg id=\"my-svg-icons\" iconSize=\"24\">\n      <svg>\n        <defs>\n          <g id=\"shape\">\n            <rect x=\"50\" y=\"50\" width=\"50\" height=\"50\" />\n            <circle cx=\"50\" cy=\"50\" r=\"50\" />\n          </g>\n        </defs>\n      </svg>\n    </core-iconset-svg>\n\nThis will automatically register the icon set \"my-svg-icons\" to the iconset\ndatabase.  To use these icons from within another element, make a\n`core-iconset` element and call the `byId` method\nto retrieve a given iconset. To apply a particular icon inside an\nelement use the `applyIcon` method. For example:\n\n    iconset.applyIcon(iconNode, 'car');",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core iconset svg",
      "name": "core-iconset-svg"
    },
    {
      "ports": {
        "input": {
          "src": {
            "name": "src",
            "description": "The URL of the iconset image.",
            "type": "string",
            "default": "",
            "title": "Src"
          },
          "width": {
            "name": "width",
            "description": "The width of the iconset image. This must only be specified if the\nicons are arranged into separate rows inside the image.",
            "type": "number",
            "default": 0,
            "title": "Width"
          },
          "icons": {
            "name": "icons",
            "description": "A space separated list of names corresponding to icons in the iconset\nimage file. This list must be ordered the same as the icon images\nin the image file.",
            "type": "string",
            "default": "",
            "title": "Icons"
          },
          "iconSize": {
            "name": "iconSize",
            "description": "The size of an individual icon. Note that icons must be square.",
            "type": "number",
            "default": 24,
            "title": "Icon size"
          },
          "offsetX": {
            "name": "offsetX",
            "description": "The horizontal offset of the icon images in the inconset src image.\nThis is typically used if the image resource contains additional images\nbeside those intended for the iconset.",
            "type": "number",
            "default": 0,
            "title": "Offset x"
          },
          "offsetY": {
            "name": "offsetY",
            "description": "The vertical offset of the icon images in the inconset src image.\nThis is typically used if the image resource contains additional images\nbeside those intended for the iconset.",
            "type": "number",
            "default": 0,
            "title": "Offset y"
          },
          "getOffset": {
            "name": "getOffset",
            "description": "Returns an object containing `offsetX` and `offsetY` properties which\nspecify the pixel locaion in the iconset's src file for the given\n`icon` and `theme`. It's uncommon to call this method. It is useful,\nfor example, to manually position a css backgroundImage to the proper\noffset. It's more common to use the `applyIcon` method.\n\nicon within in the icon image.\nwithin the icon resource file; `offsetX` is the horizontal offset and\n`offsetY` is the vertical offset. Both values are in pixel units.",
            "title": "Get offset",
            "async": true,
            "type": "object",
            "properties": {
              "icon": {
                "type": "String|Number",
                "name": "icon",
                "description": "The name of the icon or the index of the",
                "title": "Icon"
              },
              "theme": {
                "type": "String",
                "name": "theme",
                "description": "The name of the theme.",
                "title": "Theme"
              }
            }
          },
          "applyIcon": {
            "name": "applyIcon",
            "description": "Applies an icon to the given element as a css background image. This\nmethod does not size the element, and it's often necessary to set \nthe element's height and width so that the background image is visible.\n\napplied.\nwith which the icon can be magnified.",
            "title": "Apply icon",
            "async": true,
            "type": "object",
            "properties": {
              "element": {
                "type": "Element",
                "name": "element",
                "description": "The element to which the background is",
                "title": "Element"
              },
              "icon": {
                "type": "String|Number",
                "name": "icon",
                "description": "The name or index of the icon to apply.",
                "title": "Icon"
              },
              "scale": {
                "type": "Number",
                "name": "scale",
                "description": "(optional, defaults to 1) A scaling factor ",
                "title": "Scale"
              }
            }
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-iconset": "Polymer/core-iconset#master"
        }
      },
      "description": "The `core-iconset` element allows users to define their own icon sets. \nThe `src` property specifies the url of the icon image. Multiple icons may\nbe included in this image and they may be organized into rows.\nThe `icons` property is a space separated list of names corresponding to the\nicons. The names must be ordered as the icons are ordered in the icon image.\nIcons are expected to be square and are the size specified by the `iconSize`\nproperty. The `width` property corresponds to the width of the icon image \nand must be specified if icons are arranged into multiple rows in the image.\n\nAll `core-iconset` elements are available for use by other `core-iconset`\nelements via a database keyed by id. Typically, an element author that wants\nto support a set of custom icons uses a `core-iconset` to retrieve \nand use another, user-defined iconset.\n\nExample:\n\n    <core-iconset id=\"my-icons\" src=\"my-icons.png\" width=\"96\" iconSize=\"24\"\n        icons=\"location place starta stopb bus car train walk\">\n    </core-iconset>\n\nThis will automatically register the icon set \"my-icons\" to the iconset\ndatabase.  To use these icons from within another element, make a \n`core-iconset` element and call the `byId` method to retrieve a\ngiven iconset. To apply a particular icon to an element, use the \n`applyIcon` method. For example:\n\n    iconset.applyIcon(iconNode, 'car');\n\nThemed icon sets are also supported. The `core-iconset` can contain child\n`property` elements that specify a theme with an offsetX and offsetY of the\ntheme within the icon resource. For example.\n\n    <core-iconset id=\"my-icons\" src=\"my-icons.png\" width=\"96\" iconSize=\"24\"\n        icons=\"location place starta stopb bus car train walk\">\n      <property theme=\"special\" offsetX=\"256\" offsetY=\"24\"></property>\n    </core-iconset>\n\nThen a themed icon can be applied like this:\n\n    iconset.applyIcon(iconNode, 'car', 'special');",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core iconset",
      "name": "core-iconset"
    },
    {
      "ports": {
        "input": {
          "src": {
            "name": "src",
            "description": "The URL of an image.",
            "type": "string",
            "default": null,
            "title": "Src"
          },
          "load": {
            "name": "load",
            "description": "When false, the image is prevented from loading and any placeholder is\nshown.  This may be useful when a binding to the src property is known to\nbe invalid, to prevent 404 requests.",
            "type": "boolean",
            "default": true,
            "title": "Load"
          },
          "sizing": {
            "name": "sizing",
            "description": "Sets a sizing option for the image.  Valid values are `contain` (full\naspect ratio of the image is contained within the element and\nletterboxed) or `cover` (image is cropped in order to fully cover the\nbounds of the element), or `null` (default: image takes natural size).",
            "type": "string",
            "default": null,
            "title": "Sizing"
          },
          "position": {
            "name": "position",
            "description": "When a sizing option is uzed (`cover` or `contain`), this determines\nhow the image is aligned within the element bounds.",
            "type": "string",
            "default": "center",
            "title": "Position"
          },
          "preload": {
            "name": "preload",
            "description": "When `true`, any change to the `src` property will cause the `placeholder`\nimage (or background color, if no `placeholder` is specified) to be shown\nuntil the image has loaded.",
            "type": "boolean",
            "default": false,
            "title": "Preload"
          },
          "placeholder": {
            "name": "placeholder",
            "description": "This image will be used as a background/placeholder until the src image has\nloaded.  Use of a data-URI for placeholder is encouraged for instant rendering.",
            "type": "string",
            "default": null,
            "title": "Placeholder"
          },
          "role": {
            "name": "role",
            "description": "ARIA role for this element. It defaults to `img` since this element is\nintended to be behave like an `<img>`.",
            "type": "string",
            "default": "\"img\"",
            "title": "Role"
          },
          "fade": {
            "name": "fade",
            "description": "When `preload` is true, setting `fade` to true will cause the image to\nfade into place.",
            "type": "boolean",
            "default": false,
            "title": "Fade"
          },
          "loading": {
            "name": "loading",
            "description": "Read-only value that tracks the loading state of the image when the `preload`\noption is used.",
            "type": "boolean",
            "default": false,
            "title": "Loading"
          },
          "width": {
            "name": "width",
            "description": "Can be used to set the width of image (e.g. via binding); size may also be\nset via CSS.",
            "type": "number",
            "default": null,
            "title": "Width"
          },
          "height": {
            "name": "height",
            "description": "Can be used to set the height of image (e.g. via binding); size may also be\nset via CSS.",
            "type": "number",
            "default": null,
            "title": "Height"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-image": "Polymer/core-image#master"
        }
      },
      "description": "`core-image` is an element for displaying an image that provides useful sizing and\npreloading options not found on the standard `<img>` tag.\n\nThe `sizing` option allows the image to be either cropped (`cover`) or\nletterboxed (`contain`) to fill a fixed user-size placed on the element.\n\nThe `preload` option prevents the browser from rendering the image until the\nimage is fully loaded.  In the interim, either the element's CSS `background-color`\ncan be be used as the placeholder, or the `placeholder` property can be\nset to a URL (preferably a data-URI, for instant rendering) for an\nplaceholder image.\n\nThe `fade` option (only valid when `preload` is set) will cause the placeholder\nimage/color to be faded out once the image is rendered.\n\nExamples:\n\n  Basically identical to &lt;img src=\"...\"&gt; tag:\n\n    <core-image src=\"http://lorempixel.com/400/400\"></core-image>\n\n  Will letterbox the image to fit:\n\n    <core-image style=\"width:400px; height:400px;\" sizing=\"contain\"\n      src=\"http://lorempixel.com/600/400\"></core-image>\n\n  Will crop the image to fit:\n\n    <core-image style=\"width:400px; height:400px;\" sizing=\"cover\"\n      src=\"http://lorempixel.com/600/400\"></core-image>\n\n  Will show light-gray background until the image loads:\n\n    <core-image style=\"width:400px; height:400px; background-color: lightgray;\"\n      sizing=\"cover\" preload src=\"http://lorempixel.com/600/400\"></core-image>\n\n  Will show a base-64 encoded placeholder image until the image loads:\n\n    <core-image style=\"width:400px; height:400px;\" placeholder=\"data:image/gif;base64,...\"\n      sizing=\"cover\" preload src=\"http://lorempixel.com/600/400\"></core-image>\n\n  Will fade the light-gray background out once the image is loaded:\n\n    <core-image style=\"width:400px; height:400px; background-color: lightgray;\"\n      sizing=\"cover\" preload fade src=\"http://lorempixel.com/600/400\"></core-image>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core image",
      "name": "core-image"
    },
    {
      "ports": {
        "input": {
          "committedValue": {
            "name": "committedValue",
            "description": "The \"committed\" value of the input, ie. the input value when the user\nhits the \"enter\" key or blurs the input after changing the value. You\ncan bind to this value instead of listening for the \"change\" event.\nSetting this property has no effect on the input value.",
            "type": "string",
            "default": "",
            "title": "Committed value"
          },
          "preventInvalidInput": {
            "name": "preventInvalidInput",
            "description": "Set to true to prevent invalid input from being entered.",
            "type": "boolean",
            "default": false,
            "title": "Prevent invalid input"
          },
          "commit": {
            "name": "commit",
            "description": "Commits the `value` to `committedValue`",
            "title": "Commit",
            "async": true
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-input": "Polymer/core-input#master"
        }
      },
      "description": "`core-input` is an unstyled single-line input field. It extends the native\n`input` element.\n\nExample:\n\n    <input is=\"core-input\">\n\nThe input's value is considered \"committed\" if the user hits the \"enter\" key\nor blurs the input after changing the value. The committed value is stored in\nthe `committedValue` property.\n\nIf the input has `type = number`, this element will also prevent non-numeric characters\nfrom being typed into the text field.\n\nAccessibility\n-------------\n\nThe following ARIA attributes are set automatically:\n\n- `aria-label`: set to the `placeholder` attribute\n- `aria-disabled`: set if `disabled` is true",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core input",
      "name": "core-input"
    },
    {
      "ports": {
        "input": {
          "src": {
            "name": "src",
            "description": "The URL of an image for the icon.",
            "type": "string",
            "default": "",
            "title": "Src"
          },
          "icon": {
            "name": "icon",
            "description": "Specifies the icon from the Polymer icon set.",
            "type": "string",
            "default": "",
            "title": "Icon"
          },
          "label": {
            "name": "label",
            "description": "Specifies the label for the menu item.",
            "type": "string",
            "default": "",
            "title": "Label"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-item": "Polymer/core-item#master"
        }
      },
      "description": "`core-item` is a simple line-item object: a label and/or an icon that can also \nact as a link.\n\nExample:\n\n    <core-item icon=\"settings\" label=\"Settings\"></core-item>\n    \nTo use as a link, put &lt;a&gt; element in the item.\n\nExample:\n\n    <core-item icon=\"settings\" label=\"Settings\">\n      <a href=\"#settings\" target=\"_self\"></a>\n    </core-item>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core item",
      "name": "core-item"
    },
    {
      "ports": {
        "input": {
          "for": {
            "name": "for",
            "description": "A query selector string for a \"target\" element not nested in the `<core-label>`",
            "type": "string",
            "default": "",
            "title": "For"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-label": "Polymer/core-label#master"
        }
      },
      "description": "`<core-label>` provides a version of the `<label>` element that works with Custom Elements as well as native elements.\n\nAll text in the `core-label` will be applied to the target element as a screen-reader accessible description.\n\nThere are two ways to use `core-label` to target an element:\n\n1. place an element inside core-label with the `for` attribute:\n\n        <core-label>\n          Context for the Button\n          <paper-button for>button</paper-button>\n        </core-label>\n\n2. Set the `for` attribute on the `core-label` element to point to a target element in the same scope with a query\nstring:\n\n        <core-label for=\".foo\">\n          Context for the button witht the \"foo\" class\"\n        </core-label>\n        <paper-button class=\"foo\">Far away button</paper-button>\n\nAll taps on the `core-label` will be forwarded to the \"target\" element.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core label",
      "name": "core-label"
    },
    {
      "ports": {
        "input": {
          "layout": {
            "name": "layout",
            "description": "Arrange sibling nodes end-to-end in one dimension.\n\nArrangement is horizontal unless the `vertical`\nattribute is applied on this node.",
            "title": "Layout",
            "async": true
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-layout-trbl": "Polymer/core-layout-trbl#master"
        }
      },
      "description": "`<core-layout-trbl>` arranges nodes horizontally via absolute positioning.\nSet the `vertical` attribute (boolean) to arrange vertically instead.\n\n`<core-layout-trbl>` arranges it's <b>sibling elements</b>, not\nit's children.\n\nOne arranged node may be marked as elastic by giving it a `flex`\nattribute (boolean).\n\nYou may remove a node from layout by giving it a `nolayout`\nattribute (boolean).\n\nCSS Notes:\n\n`padding` is ignored on the parent node.\n`margin` is ignored on arranged nodes.\n`min-width` is ignored on arranged nodes, use `min-width` on the parent node \ninstead.\n\nExample: \n\nArrange three `div` into columns. `flex` attribute on Column Two makes that\ncolumn elastic.\n\n     <core-layout-trbl></core-layout-trbl>\n     <div>Column One</div>\n     <div flex>Column Two</div>\n     <div>Column Three</div>\n\nRemember that `<core-layout-trbl>` arranges it's sibling elements, not it's children.\n\nIf body has width 52 device pixels (in this case, ascii characters), call that 52px.\nColumn One has it's natural width of 12px (including border), Column Three has it's\nnatural width of 14px, body border uses 2px, and Column Two automatically uses the\nremaining space: 24px.\n\n     |-                    52px                        -| \n     ----------------------------------------------------\n     ||Column One||      Column Two      ||Column Three||\n     ----------------------------------------------------\n      |-  12px  -||-     (24px)         -||    14px   -|\n\nAs the parent node resizes, the elastic column reacts via CSS to adjust it's size.\nNo javascript is used during parent resizing, for best performance. \n\nChanges in content or sibling size are not handled automatically. \n\n     ----------------------------------------------------------------\n     ||Column One|             Column Two             |Column Three||\n     ----------------------------------------------------------------\n\n     --------------------------------------\n     ||Column One|Column Two|Column Three||\n     --------------------------------------\n\nArrange in rows by adding the `vertical` attribute.\n\nExample:\n\n     <core-layout-trbl vertical></core-layout-trbl>\n     <div>Row One</div>\n     <div flex>Row Two</div>\n     <div>Row Three</div>\n\nThis setup will cause Row Two to stretch to fill the container.\n\n     -----------             -----------\n     |---------|             |---------|\n     |         |             |         |\n     |Row One  |             |Row One  |\n     |         |             |         |\n     |---------|             |---------|\n     |         |             |         |\n     |Row Two  |             |Row Two  |\n     |         |             |         |\n     |---------|             |         |\n     |         |             |         |\n     |Row Three|             |         |\n     |         |             |---------|\n     |---------|             |         |\n     -----------             |Row Three|\n                             |         |\n                             |---------|\n                             |---------|\n\nLayouts can be nested arbitrarily.\n\n     <core-layout-trbl></core-layout-trbl>\n     <div>Menu</div>\n     <div flex>\n        <core-layout-trbl vertical></core-layout-trbl>\n        <div>Title</div>\n        <div>Toolbar</div>\n        <div flex>Main</div>\n        <div>Footer</div>\n     </div>\n\nRenders something like this\n\n     --------------------------------\n     ||Menu     ||Title            ||\n     ||         ||-----------------||\n     ||         ||Toolbar          ||\n     ||         ||-----------------||\n     ||         ||Main             ||\n     ||         ||                 ||\n     ||         ||-----------------||\n     ||         ||Footer           ||\n     --------------------------------",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core layout trbl",
      "name": "core-layout-trbl"
    },
    {
      "ports": {
        "input": {
          "data": {
            "name": "data",
            "description": "An array of source data for the list to display.  Elements\nfrom this array will be set to the `model` peroperty on each\ntemplate instance scope for binding.\n\nWhen `groups` is used, this array may either be flat, with\nthe group lengths specified in the `groups` array; otherwise\n`data` may be specified as an array of arrays, such that the\neach array in `data` specifies a group.  See examples above.",
            "type": "array",
            "default": null,
            "title": "Data"
          },
          "groups": {
            "name": "groups",
            "description": "An array of data conveying information about groupings of items\nin the `data` array.  Elements from this array will be set to the\n`groupModel` property of each template instance scope for binding.\n\nWhen `groups` is used, template children with the `divider` attribute\nwill be shown above each group.  Typically data from the `groupModel`\nwould be bound to dividers.\n\nIf `data` is specified as a flat array, the `groups` array must\ncontain objects of the format `{ length: n, data: {...} }`, where\n`length` determines the number of items from the `data` array\nthat should be grouped, and `data` specifies the user data that will\nbe assigned to the `groupModel` property on the template instance\nscope.\n\nIf `data` is specified as a nested array of arrays, group lengths\nare derived from these arrays, so each object in `groups` need only\ncontain the user data to be assigned to `groupModel`.",
            "type": "array",
            "default": null,
            "title": "Groups"
          },
          "scrollTarget": {
            "name": "scrollTarget",
            "description": "An optional element on which to listen for scroll events.",
            "type": "Element",
            "default": "core-list",
            "title": "Scroll target"
          },
          "selectionEnabled": {
            "name": "selectionEnabled",
            "description": "When true, tapping a row will select the item, placing its data model\nin the set of selected items retrievable via the `selection` property.\n\nNote that tapping focusable elements within the list item will not\nresult in selection, since they are presumed to have their own action.",
            "type": "{boolean}",
            "default": "true",
            "title": "Selection enabled"
          },
          "multi": {
            "name": "multi",
            "description": "Set to true to support multiple selection.  Note, existing selection\nstate is maintained only when changing `multi` from `false` to `true`;\nit is cleared when changing from `true` to `false`.",
            "type": "boolean",
            "default": false,
            "title": "Multi"
          },
          "selection": {
            "name": "selection",
            "description": "Data record (or array of records, if `multi: true`) corresponding to\nthe currently selected set of items.",
            "type": "{any}",
            "default": null,
            "title": "Selection"
          },
          "grid": {
            "name": "grid",
            "description": "When true, the list is rendered as a grid.  Grid items must be fixed\nheight and width, with the width of each item specified in the `width`\nproperty.",
            "type": "boolean",
            "default": false,
            "title": "Grid"
          },
          "width": {
            "name": "width",
            "description": "When `grid` is used, `width` determines the width of each grid item.\nThis property has no meaning when not in `grid` mode.",
            "type": "number",
            "default": null,
            "title": "Width"
          },
          "height": {
            "name": "height",
            "description": "The approximate height of a list item, in pixels. This is used only for determining\nthe number of physical elements to render based on the viewport size\nof the list.  Items themselves may vary in height between each other\ndepending on their data model.  There is typically no need to adjust \nthis value unless the average size is much larger or smaller than the default.",
            "type": "number",
            "default": 200,
            "title": "Height"
          },
          "runwayFactor": {
            "name": "runwayFactor",
            "description": "The amount of scrolling runway the list keeps rendered, as a factor of\nthe list viewport size.  There is typically no need to adjust this value\nother than for performance tuning.  Larger value correspond to more\nphysical elements being rendered.",
            "type": "number",
            "default": 4,
            "title": "Runway factor"
          },
          "updateSize": {
            "name": "updateSize",
            "description": "To be called by the user when the list is manually resized\nor shown after being hidden.",
            "title": "Update size",
            "async": true
          },
          "selectItem": {
            "name": "selectItem",
            "description": "Select the list item at the given index.",
            "title": "Select item",
            "async": true,
            "type": "object",
            "properties": {
              "index": {
                "type": "number",
                "name": "index",
                "description": "",
                "title": "Index"
              }
            }
          },
          "setItemSelected": {
            "name": "setItemSelected",
            "description": "Set the selected state of the list item at the given index.",
            "title": "Set item selected",
            "async": true,
            "type": "object",
            "properties": {
              "index": {
                "type": "number",
                "name": "index",
                "description": "",
                "title": "Index"
              },
              "isSelected": {
                "type": "boolean",
                "name": "isSelected",
                "description": "",
                "title": "Is selected"
              }
            }
          },
          "clearSelection": {
            "name": "clearSelection",
            "description": "Clears the current selection state of the list.",
            "title": "Clear selection",
            "async": true
          },
          "scrollToItem": {
            "name": "scrollToItem",
            "description": "Scroll to an item.\n\nNote, when grouping is used, the index is based on the\ntotal flattened number of items.  For scrolling to an item\nwithin a group, use the `scrollToGroupItem` API.",
            "title": "Scroll to item",
            "async": true,
            "type": "object",
            "properties": {
              "index": {
                "type": "number",
                "name": "index",
                "description": "",
                "title": "Index"
              }
            }
          },
          "scrollToGroup": {
            "name": "scrollToGroup",
            "description": "Scroll to a group.",
            "title": "Scroll to group",
            "async": true,
            "type": "object",
            "properties": {
              "group": {
                "type": "number",
                "name": "group",
                "description": "",
                "title": "Group"
              }
            }
          },
          "scrollToGroupItem": {
            "name": "scrollToGroupItem",
            "description": "Scroll to an item within a group.",
            "title": "Scroll to group item",
            "async": true,
            "type": "object",
            "properties": {
              "group": {
                "type": "number",
                "name": "group",
                "description": "",
                "title": "Group"
              },
              "index": {
                "type": "number",
                "name": "index",
                "description": "",
                "title": "Index"
              }
            }
          }
        },
        "output": {
          "core-activate": {
            "name": "core-activate",
            "description": "Fired when an item element is tapped.",
            "title": "Core activate",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-list": "Polymer/core-list#master"
        }
      },
      "description": "`core-list` displays a virtual, 'infinite' list. The template inside the \n`core-list` element represents the DOM to create for each list item. The\n`data` property specifies an array of list item data.\n\nFor performance reasons, not every item in the list is rendered at once; instead\na small subset of actual template elements (enough to fill the viewport) are\nrendered and reused as the user scrolls.  As such, it is important that all\nstate of the list template be bound to the model driving it, since the view \nmay be reused with a new model at any time.  Particularly, any state that \nmay change as the result of a user interaction with the list item must be\nbound to the model to avoid view state inconsistency.\n\nIMPORTANT: `core-list` must ether be explicitly sized, or delegate scrolling to\nan explicitly sized parent.  By \"explicitly sized\", we mean it either has an\nexplicit CSS `height` property set via a class or inline style, or else is sized\nby other layout means (e.g. `flex` or `fit`).  Alternatively, `core-list` can\ndelegate scrolling to a scrollable element that contains the list by setting the\n`scrollTarget` property, and the same explicit sizing requiremets will apply\nto that element.\n\n### Template model\n\nList item templates should bind to template models of the following structure:\n\n    {\n      index: 0,           // data index for this item\n      selected: false,    // selection state for this item\n      model: {            // user data corresponding to data[index]\n        /* user item data  */\n      }\n    }\n\nFor example, given the following data array:\n\n    [\n      {name: 'Bob', checked: true},\n      {name: 'Tim', checked: false},\n      ...\n    ]\n\nThe following code would render the list (note the `name` and `checked`\nproperties are bound from the `model` object provided to the template\nscope):\n\n    <core-list data=\"{{data}}\">\n      <template>\n        <div class=\"row {{ {selected: selected} | tokenList }}\">\n          List row: {{index}}, User data from model: {{model.name}}\n          <input type=\"checkbox\" checked=\"{{model.checked}}\">\n        </div>\n      </template>\n    </core-list>\n\n### Selection\n\nBy default, the list supports selection via tapping. Styling selected items\nshould be done via binding to the `selected` property of each model (see examples\nabove.  The data model for the selected item (for single-selection) or array of\nmodels (for multi-selection) is published to the `selection` property.\n\n### Grouping **(experimental)**\n\n`core-list` supports showing dividers between groups of data by setting the \n`groups` property to an array containing group information.  An element with\na `divider` attribute set should be supplied a the top level of the template\nnext to the template item to provide the divider template.  The template model\ncontains extra fields when `groups` is used, as follows:\n\n    {\n      index: 0,           // data index for this item\n      groupIndex: 0,      // group index for this item\n      groupItemIndex: 0,  // index within group for this item\n      selected: false,    // selection state for this item\n      model: {            // user data corresponding to data[index]\n        /* user item data  */\n      },\n      groupModel: {       // user group data corresponding to groups[index]\n        /* user group data */\n      }\n    }\n\nGroups may be specified one of two ways (users should choose the data format \nthat closest matches their source data, to avoid the performance impact of \nneeding totransform data to fit the required structure):\n\n1. Flat data array - In this scenario, the `data` array is provided as \na flat list of models.  Group lengths are determined by the `length` property\non each group object, with the `data` property providing user-specified group\ndata, typically for binding to dividers.  For example:\n\n        data = [\n          { name: 'Adam' },\n          { name: 'Alex' },\n          { name: 'Bob' },\n          { name: 'Chuck' },\n          { name: 'Cathy' },\n          ...\n        ];\n\n        groups = [\n          { length: 2, data: { letter: 'A' } },\n          { length: 1, data: { letter: 'B' } },\n          { length: 2, data: { letter: 'C' } },\n          ...\n        ];\n\n        <core-list data=\"{{data}}\" groups=\"{{groups}}\">\n          <template>\n            <div divider class=\"divider\">{{groupModel.letter}}</div>\n            <div class=\"item\">{{model.name}}</div>\n          </template>\n        </core-list>\n\n2. Nested data array - In this scenario, the `data` array is a nested\narray of arrays of models, where each array determines the length of the\ngroup, and the `groups` models provide the user-specified data directly.\nFor example:\n\n        data = [\n          [ { name: 'Adam' }, { name: 'Alex' } ],\n          [ { name: 'Bob' } ],\n          [ { name: 'Chuck' }, { name: 'Cathy' } ],\n          ...\n        ];\n\n        groups = [\n          { letter: 'A' },\n          { letter: 'B' },\n          { letter: 'C' },\n          ...\n        ];\n\n        <core-list data=\"{{data}}\" groups=\"{{groups}}\">\n          <template>\n            <div divider class=\"divider\">{{groupModel.letter}}</div>\n            <div class=\"item\">{{model.name}}</div>\n          </template>\n        </core-list>\n\n### Grid layout **(experimental)**\n\n`core-list` supports a grid layout in addition to linear layout by setting\nthe `grid` attribute.  In this case, the list template item must have both fixed\nwidth and height (e.g. via CSS), with the desired width of each grid item\nspecified by the `width` attribute.  Based on this, the number of items \nper row are determined automatically based on the size of the list viewport.\n\n### Non-native scrollers **(experimental)**\n\nBy default, core-list assumes the `scrollTarget` (if set) is a native scrollable\nelement (e.g. `overflow:auto` or `overflow:y`) that fires the `scroll` event and\nwhose scroll position can be read/set via the `scrollTop` property.\n`core-list` provides experimental support for setting `scrollTarget`\nto a custom scroller element (e.g. a JS-based scroller) as long as it provides \nthe following abstract API:\n\n  - `getScrollTop()` - returns the current scroll position\n  - `setScrollTop(y)` - sets the current scroll position\n  - Fires a `scroll` event indicating when the scroll position has changed",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core list",
      "name": "core-list"
    },
    {
      "ports": {
        "input": {
          "name": {
            "name": "name",
            "description": "The key to the data stored in localStorage.",
            "type": "string",
            "default": null,
            "title": "Name"
          },
          "value": {
            "name": "value",
            "description": "The data associated with the specified name.",
            "type": "object",
            "default": null,
            "title": "Value"
          },
          "useRaw": {
            "name": "useRaw",
            "description": "If true, the value is stored and retrieved without JSON processing.",
            "type": "boolean",
            "default": false,
            "title": "Use raw"
          },
          "autoSaveDisabled": {
            "name": "autoSaveDisabled",
            "description": "If true, auto save is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Auto save disabled"
          },
          "save": {
            "name": "save",
            "description": "Saves the value to localStorage.",
            "title": "Save",
            "async": true
          }
        },
        "output": {
          "core-localstorage-load": {
            "name": "core-localstorage-load",
            "description": "Fired when a value is loaded from localStorage.",
            "title": "Core localstorage load"
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-localstorage": "Polymer/core-localstorage#master"
        }
      },
      "description": "Element access to localStorage.  The \"name\" property\nis the key to the data (\"value\" property) stored in localStorage.\n\n`core-localstorage` automatically saves the value to localStorage when\nvalue is changed.  Note that if value is an object auto-save will be\ntriggered only when value is a different instance.\n\n    <core-localstorage name=\"my-app-storage\" value=\"{{value}}\"></core-localstorage>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core localstorage",
      "name": "core-localstorage"
    },
    {
      "ports": {
        "input": {
          "queryMatches": {
            "name": "queryMatches",
            "description": "The Boolean return value of the media query",
            "type": "Boolean",
            "default": "false",
            "title": "Query matches"
          },
          "query": {
            "name": "query",
            "description": "The CSS media query to evaulate",
            "type": "string",
            "default": "",
            "title": "Query"
          }
        },
        "output": {
          "core-media-change": {
            "name": "core-media-change",
            "description": "core-media-query can be used to data bind to a CSS media query.\nThe \"query\" property is a bare CSS media query.\nThe \"queryMatches\" property will be a boolean representing if the page matches that media query.\n\ncore-media-query uses media query listeners to dynamically update the \"queryMatches\" property.\nA \"core-media-change\" event also fires when queryMatches changes.\n\nExample:\n\n     <core-media-query query=\"max-width: 640px\" queryMatches=\"{{phoneScreen}}\"></core-media-query>\n\n\n\nFired when the media query state changes",
            "title": "Core media change"
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-media-query": "Polymer/core-media-query#master"
        }
      },
      "description": "core-media-query can be used to data bind to a CSS media query.\nThe \"query\" property is a bare CSS media query.\nThe \"queryMatches\" property will be a boolean representing if the page matches that media query.\n\ncore-media-query uses media query listeners to dynamically update the \"queryMatches\" property.\nA \"core-media-change\" event also fires when queryMatches changes.\n\nExample:\n\n     <core-media-query query=\"max-width: 640px\" queryMatches=\"{{phoneScreen}}\"></core-media-query>\n\n\n\nFired when the media query state changes",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core media query",
      "name": "core-media-query"
    },
    {
      "ports": {
        "input": {
          "label": {
            "name": "label",
            "description": "A label for the control. The label is displayed if no item is selected.",
            "type": "string",
            "default": "Select an item",
            "title": "Label"
          },
          "openedIcon": {
            "name": "openedIcon",
            "description": "The icon to display when the drop-down is opened.",
            "type": "string",
            "default": "arrow-drop-up",
            "title": "Opened icon"
          },
          "closedIcon": {
            "name": "closedIcon",
            "description": "The icon to display when the drop-down is closed.",
            "type": "string",
            "default": "arrow-drop-down",
            "title": "Closed icon"
          }
        },
        "output": {
          "core-select": {
            "name": "core-select",
            "description": "Fired when an item's selection state is changed. This event is fired both\nwhen an item is selected or deselected. The `isSelected` detail property\ncontains the selection state.",
            "title": "Core select",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "isSelected": {
                    "type": "boolean",
                    "name": "isSelected",
                    "description": "true for selection and false for deselection",
                    "title": "Is selected"
                  },
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-menu-button": "Polymer/core-menu-button#master"
        }
      },
      "description": "`core-menu-button` works together with a button and `core-dropdown` to implement\nan button that displays a drop-down when tapped on.\n\nThe child element with the class `dropdown` will be used as the drop-down\nmenu. It should be a `core-dropdown` or other overlay element.\n\nExample:\n\n    <core-menu-button>\n        <core-icon-button icon=\"menu\"></core-icon-button>\n        <core-dropdown class=\"dropdown\" layered>\n            <core-menu>\n                <core-item>Share</core-item>\n                <core-item>Settings</core-item>\n                <core-item>Help</core-item>\n            </core-menu>\n        </core-dropdown>\n    </core-menu-button>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core menu button",
      "name": "core-menu-button"
    },
    {
      "ports": {
        "input": {
          "noink": {
            "name": "noink",
            "description": "If true, ink ripple effect is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Noink"
          },
          "nobar": {
            "name": "nobar",
            "description": "If true, the bottom bar to indicate the selected tab will not be shown.",
            "type": "boolean",
            "default": false,
            "title": "Nobar"
          },
          "noslide": {
            "name": "noslide",
            "description": "If true, the slide effect for the bottom bar is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Noslide"
          },
          "scrollable": {
            "name": "scrollable",
            "description": "If true, tabs are scrollable and the tab width is based on the label width.",
            "type": "boolean",
            "default": false,
            "title": "Scrollable"
          },
          "disableDrag": {
            "name": "disableDrag",
            "description": "If true, dragging on the tabs to scroll is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Disable drag"
          },
          "hideScrollButton": {
            "name": "hideScrollButton",
            "description": "If true, scroll buttons (left/right arrow) will be hidden for scrollable tabs.",
            "type": "boolean",
            "default": false,
            "title": "Hide scroll button"
          },
          "updateBar": {
            "name": "updateBar",
            "description": "Invoke this to update the size and position of the bottom bar.  Usually\nyou only need to call this if the `paper-tabs` is initially hidden and\nlater becomes visible.",
            "title": "Update bar",
            "async": true
          }
        },
        "output": {
          "core-select": {
            "name": "core-select",
            "description": "Fired when an item's selection state is changed. This event is fired both\nwhen an item is selected or deselected. The `isSelected` detail property\ncontains the selection state.",
            "title": "Core select",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "isSelected": {
                    "type": "boolean",
                    "name": "isSelected",
                    "description": "true for selection and false for deselection",
                    "title": "Is selected"
                  },
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          },
          "core-activate": {
            "name": "core-activate",
            "description": "Fired when an item element is tapped.",
            "title": "Core activate",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-menu": "Polymer/core-menu#master"
        }
      },
      "description": "`core-menu` is a selector which styles to looks like a menu.\n\n    <core-menu selected=\"0\">\n      <core-item icon=\"settings\" label=\"Settings\"></core-item>\n      <core-item icon=\"dialog\" label=\"Dialog\"></core-item>\n      <core-item icon=\"search\" label=\"Search\"></core-item>\n    </core-menu>\n    \nWhen an item is selected the `core-selected` class is added to it.  The user can\nuse the class to add more stylings to the selected item.\n\n    core-item.core-selected {\n      color: red;\n    }\n\nThe `selectedItem` property references the selected item.\n\n    <core-menu selected=\"0\" selectedItem=\"{{item}}\">\n      <core-item icon=\"settings\" label=\"Settings\"></core-item>\n      <core-item icon=\"dialog\" label=\"Dialog\"></core-item>\n      <core-item icon=\"search\" label=\"Search\"></core-item>\n    </core-menu>\n\n    <div>selected label: {{item.label}}</div>\n\nThe `core-select` event signals selection change.\n\n    <core-menu selected=\"0\" on-core-select=\"{{selectAction}}\">\n      <core-item icon=\"settings\" label=\"Settings\"></core-item>\n      <core-item icon=\"dialog\" label=\"Dialog\"></core-item>\n      <core-item icon=\"search\" label=\"Search\"></core-item>\n    </core-menu>\n\n    ...\n\n    selectAction: function(e, detail) {\n      if (detail.isSelected) {\n        var selectedItem = detail.item;\n        ...\n      }\n    }",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core menu",
      "name": "core-menu"
    },
    {
      "ports": {
        "input": {
          "type": {
            "name": "type",
            "description": "The type of meta-data.  All meta-data with the same type with be\nstored together.",
            "type": "string",
            "default": "default",
            "title": "Type"
          },
          "byId": {
            "name": "byId",
            "description": "Retrieves meta-data by ID.",
            "title": "By",
            "async": true,
            "type": "object",
            "properties": {
              "id": {
                "type": "String",
                "name": "id",
                "description": "The ID of the meta-data to be returned.",
                "title": "Id"
              }
            }
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-meta": "Polymer/core-meta#master"
        }
      },
      "description": "`core-meta` provides a method of constructing a self-organizing database.\nIt is useful to collate element meta-data for things like catalogs and for \ndesigner.\n\nExample, an element folder has a `metadata.html` file in it, that contains a \n`core-meta`, something like this:\n\n    <core-meta id=\"my-element\" label=\"My Element\">\n      <property name=\"color\" value=\"blue\"></property>\n    </core-meta>\n\nAn application can import as many of these files as it wants, and then use \n`core-meta` again to access the collected data.\n\n    <script>\n      var meta = document.createElement('core-meta');\n      console.log(meta.list); // dump a list of all meta-data elements that have been created\n    </script>\n\nUse `byId(id)` to retrive a specific core-meta.\n\n    <script>\n      var meta = document.createElement('core-meta');\n      console.log(meta.byId('my-element'));\n    </script>\n\nBy default all meta-data are stored in a single databse.  If your meta-data \nhave different types and want them to be stored separately, use `type` to \ndifferentiate them.\n\nExample:\n\n    <core-meta id=\"x-foo\" type=\"xElt\"></core-meta>\n    <core-meta id=\"x-bar\" type=\"xElt\"></core-meta>\n    <core-meta id=\"y-bar\" type=\"yElt\"></core-meta>\n\n    <script>\n      var meta = document.createElement('core-meta');\n      meta.type = 'xElt';\n      console.log(meta.list);\n    </script>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core meta",
      "name": "core-meta"
    },
    {
      "ports": {
        "input": {
          "target": {
            "name": "target",
            "description": "The target element that will be shown when the overlay is \nopened. If unspecified, the core-overlay itself is the target.",
            "type": "Object",
            "default": "the overlay element",
            "title": "Target"
          },
          "sizingTarget": {
            "name": "sizingTarget",
            "description": "A `core-overlay`'s size is guaranteed to be \nconstrained to the window size. To achieve this, the sizingElement\nis sized with a max-height/width. By default this element is the \ntarget element, but it can be specifically set to a specific element\ninside the target if that is more appropriate. This is useful, for \nexample, when a region inside the overlay should scroll if needed.",
            "type": "Object",
            "default": "the target element",
            "title": "Sizing target"
          },
          "opened": {
            "name": "opened",
            "description": "Set opened to true to show an overlay and to false to hide it.\nA `core-overlay` may be made initially opened by setting its\n`opened` attribute.",
            "type": "boolean",
            "default": false,
            "title": "Opened"
          },
          "backdrop": {
            "name": "backdrop",
            "description": "If true, the overlay has a backdrop darkening the rest of the screen.\nThe backdrop element is attached to the document body and may be styled\nwith the class `core-overlay-backdrop`. When opened the `core-opened`\nclass is applied.",
            "type": "boolean",
            "default": false,
            "title": "Backdrop"
          },
          "layered": {
            "name": "layered",
            "description": "If true, the overlay is guaranteed to display above page content.",
            "type": "boolean",
            "default": false,
            "title": "Layered"
          },
          "autoCloseDisabled": {
            "name": "autoCloseDisabled",
            "description": "By default an overlay will close automatically if the user\ntaps outside it or presses the escape key. Disable this\nbehavior by setting the `autoCloseDisabled` property to true.",
            "type": "boolean",
            "default": false,
            "title": "Auto close disabled"
          },
          "autoFocusDisabled": {
            "name": "autoFocusDisabled",
            "description": "By default an overlay will focus its target or an element inside\nit with the `autoFocus` attribute. Disable this\nbehavior by setting the `autoFocusDisabled` property to true.",
            "type": "boolean",
            "default": false,
            "title": "Auto focus disabled"
          },
          "closeAttribute": {
            "name": "closeAttribute",
            "description": "This property specifies an attribute on elements that should\nclose the overlay on tap. Should not set `closeSelector` if this\nis set.",
            "type": "string",
            "default": "\"core-overlay-toggle\"",
            "title": "Close attribute"
          },
          "closeSelector": {
            "name": "closeSelector",
            "description": "This property specifies a selector matching elements that should\nclose the overlay on tap. Should not set `closeAttribute` if this\nis set.",
            "type": "string",
            "default": "\"\"",
            "title": "Close selector"
          },
          "transition": {
            "name": "transition",
            "description": "The transition property specifies a string which identifies a \n<a href=\"../core-transition/\">`core-transition`</a> element that \nwill be used to help the overlay open and close. The default\n`core-transition-fade` will cause the overlay to fade in and out.",
            "type": "string",
            "default": "core-transition-fade",
            "title": "Transition"
          },
          "toggle": {
            "name": "toggle",
            "description": "Toggle the opened state of the overlay.",
            "title": "Toggle",
            "async": true
          },
          "open": {
            "name": "open",
            "description": "Open the overlay. This is equivalent to setting the `opened`\nproperty to true.",
            "title": "Open",
            "async": true
          },
          "close": {
            "name": "close",
            "description": "Close the overlay. This is equivalent to setting the `opened` \nproperty to false.",
            "title": "Close",
            "async": true
          },
          "resizeHandler": {
            "name": "resizeHandler",
            "description": "Extensions of core-overlay should implement the `resizeHandler`\nmethod to adjust the size and position of the overlay when the \nbrowser window resizes.",
            "title": "Resize handler",
            "async": true
          }
        },
        "output": {
          "core-overlay-open": {
            "name": "core-overlay-open",
            "description": "Fired when the `core-overlay`'s `opened` property changes.",
            "title": "Core overlay open",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "opened": {
                    "type": "Object",
                    "name": "opened",
                    "description": "the opened state",
                    "title": "Opened"
                  }
                }
              }
            }
          },
          "core-overlay-open-completed": {
            "name": "core-overlay-open-completed",
            "description": "Fired when the `core-overlay` has completely opened.",
            "title": "Core overlay open completed"
          },
          "core-overlay-close-completed": {
            "name": "core-overlay-close-completed",
            "description": "Fired when the `core-overlay` has completely closed.",
            "title": "Core overlay close completed"
          },
          "core-overlay-position": {
            "name": "core-overlay-position",
            "description": "Fired when the `core-overlay` needs to position itself. Optionally, implement\nin order to position an overlay via code. If the overlay was not otherwise\npositioned, it's important to indicate how the overlay has been positioned by\nsetting the `dimensions.position` object. For example, if the overlay has been\npositioned via setting `right` and `top`, set dimensions.position to an\nobject like this: `{v: 'top', h: 'right'}`.",
            "title": "Core overlay position",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "target": {
                    "type": "Object",
                    "name": "target",
                    "description": "the overlay target",
                    "title": "Target"
                  },
                  "sizingTarget": {
                    "type": "Object",
                    "name": "sizingTarget",
                    "description": "the overlay sizing target",
                    "title": "Sizing target"
                  },
                  "opened": {
                    "type": "Object",
                    "name": "opened",
                    "description": "the opened state",
                    "title": "Opened"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-overlay": "Polymer/core-overlay#master"
        }
      },
      "description": "The `core-overlay` element displays overlayed on top of other content. It starts\nout hidden and is displayed by setting its `opened` property to true.\nA `core-overlay's` opened state can be toggled by calling the `toggle`\nmethod.\n\nThe `core-overlay` will, by default, show/hide itself when it's opened. The \n`target` property may be set to another element to cause that element to \nbe shown when the overlay is opened.\n\nIt's common to want a `core-overlay` to animate to its opened\nposition. The `core-overlay` element uses a `core-transition` to handle\nanimation. The default transition is `core-transition-fade` which \ncauses the overlay to fade in when displayed. See \n<a href=\"../core-transition/\">`core-transition`</a> for more\ninformation about customizing a `core-overlay's` opening animation. The\n`backdrop` property can be set to true to show a backdrop behind the overlay\nthat will darken the rest of the window.\n\nAn element that should close the `core-overlay` will automatically\ndo so if it's given the `core-overlay-toggle` attribute. This attribute\ncan be customized with the `closeAttribute` property. You can also use\n`closeSelector` if more general matching is needed.\n\nBy default  `core-overlay` will close whenever the user taps outside it or\npresses the escape key. This behavior can be turned off via the\n`autoCloseDisabled` property.\n\n    <core-overlay>\n      <h2>Dialog</h2>\n      <input placeholder=\"say something...\" autofocus>\n      <div>I agree with this wholeheartedly.</div>\n      <button core-overlay-toggle>OK</button>\n    </core-overlay>\n\n`core-overlay` will automatically size and position itself according to the \nfollowing rules. The overlay's size is constrained such that it does not\noverflow the screen. This is done by setting maxHeight/maxWidth on the \n`sizingTarget`. If the `sizingTarget` already has a setting for one of these\nproperties, it will not be overridden. The overlay should\nbe positioned via css or imperatively using the `core-overlay-position` event.\nIf the overlay is not positioned vertically via setting `top` or `bottom`, it\nwill be centered vertically. The same is true horizontally via a setting to \n`left` or `right`. In addition, css `margin` can be used to provide some space\naround the overlay. This can be used to ensure\nthat, for example, a drop shadow is always visible around the overlay.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core overlay",
      "name": "core-overlay"
    },
    {
      "ports": {
        "input": {
          "noink": {
            "name": "noink",
            "description": "If true, ink ripple effect is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Noink"
          },
          "nobar": {
            "name": "nobar",
            "description": "If true, the bottom bar to indicate the selected tab will not be shown.",
            "type": "boolean",
            "default": false,
            "title": "Nobar"
          },
          "noslide": {
            "name": "noslide",
            "description": "If true, the slide effect for the bottom bar is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Noslide"
          },
          "scrollable": {
            "name": "scrollable",
            "description": "If true, tabs are scrollable and the tab width is based on the label width.",
            "type": "boolean",
            "default": false,
            "title": "Scrollable"
          },
          "disableDrag": {
            "name": "disableDrag",
            "description": "If true, dragging on the tabs to scroll is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Disable drag"
          },
          "hideScrollButton": {
            "name": "hideScrollButton",
            "description": "If true, scroll buttons (left/right arrow) will be hidden for scrollable tabs.",
            "type": "boolean",
            "default": false,
            "title": "Hide scroll button"
          },
          "updateBar": {
            "name": "updateBar",
            "description": "Invoke this to update the size and position of the bottom bar.  Usually\nyou only need to call this if the `paper-tabs` is initially hidden and\nlater becomes visible.",
            "title": "Update bar",
            "async": true
          }
        },
        "output": {
          "core-select": {
            "name": "core-select",
            "description": "Fired when an item's selection state is changed. This event is fired both\nwhen an item is selected or deselected. The `isSelected` detail property\ncontains the selection state.",
            "title": "Core select",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "isSelected": {
                    "type": "boolean",
                    "name": "isSelected",
                    "description": "true for selection and false for deselection",
                    "title": "Is selected"
                  },
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          },
          "core-activate": {
            "name": "core-activate",
            "description": "Fired when an item element is tapped.",
            "title": "Core activate",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-pages": "Polymer/core-pages#master"
        }
      },
      "description": "`core-pages` is used to select one of its children to show. One use is to cycle through a list of children \"pages\".\n\nExample: \n\n    <core-pages selected=\"0\">\n      <div>One</div>\n      <div>Two</div>\n      <div>Three</div>\n    </core-pages>\n\n    <script>\n      document.addEventListener('click', function(e) {\n        var pages = document.querySelector('core-pages');\n        pages.selected = (pages.selected + 1) % pages.children.length;\n      });\n    </script>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core pages",
      "name": "core-pages"
    },
    {
      "ports": {
        "input": {
          "value": {
            "name": "value",
            "description": "The number that represents the current value.",
            "type": "number",
            "default": 0,
            "title": "Value"
          },
          "min": {
            "name": "min",
            "description": "The number that indicates the minimum value of the range.",
            "type": "number",
            "default": 0,
            "title": "Min"
          },
          "max": {
            "name": "max",
            "description": "The number that indicates the maximum value of the range.",
            "type": "number",
            "default": 100,
            "title": "Max"
          },
          "step": {
            "name": "step",
            "description": "Specifies the value granularity of the range's value.",
            "type": "number",
            "default": 1,
            "title": "Step"
          },
          "ratio": {
            "name": "ratio",
            "description": "Returns the ratio of the value.",
            "type": "number",
            "default": 0,
            "title": "Ratio"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-range": "Polymer/core-range#master"
        }
      },
      "description": "The `core-range` element is used for managing a numeric value within a given \nrange.  It has no visual appearance and is typically used in conjunction with \nanother element.\n\nOne can build a progress bar using `core-range` like this:\n\n    <core-range min=\"0\" max=\"200\" value=\"100\" ratio=\"{{ratio}}\"></core-range>\n    <div class=\"progress-bar\" style=\"width: {{ratio}}%;\"></div>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core range",
      "name": "core-range"
    },
    {
      "ports": {
        "input": {
          "drawerWidth": {
            "name": "drawerWidth",
            "description": "Width of the drawer panel.",
            "type": "string",
            "default": "256px",
            "title": "Drawer width"
          },
          "responsiveWidth": {
            "name": "responsiveWidth",
            "description": "When the browser window size is smaller than the `responsiveWidth`, \n`core-drawer-panel` changes to a narrow layout. In narrow layout, \nthe drawer will be stacked on top of the main panel.",
            "type": "string",
            "default": "600px",
            "title": "Responsive width"
          },
          "rightDrawer": {
            "name": "rightDrawer",
            "description": "If true, position the drawer to the right. Also place menu icon to\nthe right of the content instead of left.",
            "type": "boolean",
            "default": false,
            "title": "Right drawer"
          },
          "disableSwipe": {
            "name": "disableSwipe",
            "description": "If true, swipe to open/close the drawer is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Disable swipe"
          },
          "mode": {
            "name": "mode",
            "description": "Used to control the header and scrolling behaviour of `core-header-panel`",
            "type": "string",
            "default": "seamed",
            "title": "Mode"
          },
          "togglePanel": {
            "name": "togglePanel",
            "description": "Toggle the drawer panel",
            "title": "Toggle panel",
            "async": true
          },
          "openDrawer": {
            "name": "openDrawer",
            "description": "Open the drawer panel",
            "title": "Open drawer",
            "async": true
          },
          "closeDrawer": {
            "name": "closeDrawer",
            "description": "Close the drawer panel",
            "title": "Close drawer",
            "async": true
          }
        },
        "output": {
          "scroll": {
            "name": "scroll",
            "description": "Fired when the main content has been scrolled.  `event.detail.target` returns\nthe scrollable element which you can use to access scroll info such as\n`scrollTop`.\n\n    <core-scaffold on-scroll=\"{{scrollHandler}}\">\n      ...\n    </core-scaffold>\n\n\n    scrollHandler: function(event) {\n      var scroller = event.detail.target;\n      console.log(scroller.scrollTop);\n    }",
            "title": "Scroll"
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-scaffold": "Polymer/core-scaffold#master"
        }
      },
      "description": "`core-scaffold` provides general application layout, introducing a \nresponsive scaffold containing a header, toolbar, menu, title and \nareas for application content.\n\nExample:\n\n    <core-scaffold>\n      <core-header-panel navigation flex mode=\"seamed\">\n        <core-toolbar>Application</core-toolbar>\n        <core-menu theme=\"core-light-theme\">\n          <core-item icon=\"settings\" label=\"item1\"></core-item>\n          <core-item icon=\"settings\" label=\"item2\"></core-item>\n        </core-menu>\n      </core-header-panel>\n      <div tool>Title</div>\n      <div>Main content goes here...</div>\n    </core-scaffold>\n\nUse `mode` to control the header and scrolling behavior of `core-header-panel`\nand `responsiveWidth` to change the layout of the scaffold.  Use 'disableSwipe'\nto disable swipe-to-open on toolbar.\n\nUse `rightDrawer` to move position of folding toolbar to the right instead of\nleft (default).  This will also position content to the left of the menu button\ninstead of the right.  You can use `flex` within your `tool` content to push the menu\nbutton to the far right:\n\n    <core-scaffold rightDrawer>\n      <div tool flex >Title</div>\n    </core-scaffold>\n    \nYou may also add `middle` or `bottom` classes to your `tool` content when using tall\nmodes to adjust vertical content positioning in the core-toolbar (e.g. when using \nmode=\"waterfall-tall\"):\n\n    <core-scaffold rightDrawer mode=\"waterfall-tall\">\n      <div tool flex >Title</div>\n      <div tool horizontal layout flex center-justified class=\"middle\">Title-middle</div>\n      <div tool horizontal layout flex end-justified class=\"bottom\">Title-bottom</div>\n    </core-scaffold>\n\nTo have the content fit to the main area, use `fit` attribute.\n\n    <core-scaffold>\n      <core-header-panel navigation flex mode=\"seamed\">\n        ....\n      </core-header-panel>\n      <div tool>Title</div>\n      <div fit>Content fits to the main area</div>\n    </core-scaffold>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core scaffold",
      "name": "core-scaffold"
    },
    {
      "ports": {
        "input": {
          "condenses": {
            "name": "condenses",
            "description": "If true, the header's height will condense to `_condensedHeaderHeight`\nas the user scrolls down from the top of the content area.",
            "type": "boolean",
            "default": false,
            "title": "Condenses"
          },
          "noDissolve": {
            "name": "noDissolve",
            "description": "If true, no cross-fade transition from one background to another.",
            "type": "boolean",
            "default": false,
            "title": "No dissolve"
          },
          "noReveal": {
            "name": "noReveal",
            "description": "If true, the header doesn't slide back in when scrolling back up.",
            "type": "boolean",
            "default": false,
            "title": "No reveal"
          },
          "fixed": {
            "name": "fixed",
            "description": "If true, the header is fixed to the top and never moves away.",
            "type": "boolean",
            "default": false,
            "title": "Fixed"
          },
          "keepCondensedHeader": {
            "name": "keepCondensedHeader",
            "description": "If true, the condensed header is always shown and does not move away.",
            "type": "boolean",
            "default": false,
            "title": "Keep condensed header"
          },
          "headerHeight": {
            "name": "headerHeight",
            "description": "The height of the header when it is at its full size.\n\nBy default, the height will be measured when it is ready.  If the height\nchanges later the user needs to either set this value to reflect the\nnew height or invoke `measureHeaderHeight()`.",
            "type": "number",
            "default": 0,
            "title": "Header height"
          },
          "condensedHeaderHeight": {
            "name": "condensedHeaderHeight",
            "description": "The height of the header when it is condensed.\n\nBy default, `_condensedHeaderHeight` is 1/3 of `headerHeight` unless\nthis is specified.",
            "type": "number",
            "default": 0,
            "title": "Condensed header height"
          },
          "scrollAwayTopbar": {
            "name": "scrollAwayTopbar",
            "description": "By default, the top part of the header stays when the header is being\ncondensed.  Set this to true if you want the top part of the header\nto be scrolled away.",
            "type": "boolean",
            "default": false,
            "title": "Scroll away topbar"
          },
          "measureHeaderHeight": {
            "name": "measureHeaderHeight",
            "description": "Invoke this to tell `core-scroll-header-panel` to re-measure the header's\nheight.",
            "title": "Measure header height",
            "async": true
          }
        },
        "output": {
          "scroll": {
            "name": "scroll",
            "description": "Fired when the content has been scrolled.",
            "title": "Scroll"
          },
          "core-header-transform": {
            "name": "core-header-transform",
            "description": "Fired when the header is transformed.",
            "title": "Core header transform"
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-scroll-header-panel": "Polymer/core-scroll-header-panel#master"
        }
      },
      "description": "`core-scroll-header-panel` contains a header section and a content section.  The\nheader is initially on the top part of the view but it scrolls away with the \nrest of the scrollable content.  Upon scrolling slightly up at any point, the \nheader scrolls back into view.  This saves screen space and allows users to\naccess important controls by easily moving them back to the view.\n\n__Important:__ The `core-scroll-header-panel` will not display if its parent does not have a height.\n\nUsing [layout attributes](http://www.polymer-project.org/docs/polymer/layout-attrs.html), you can easily make the `core-scroll-header-panel` fill the screen\n\n    <body fullbleed layout vertical>\n      <core-scroll-header-panel flex>\n        <core-toolbar>\n          <div>Hello World!</div>\n        </core-toolbar>\n      </core-scroll-header-panel>\n    </body>\n\nor, if you would prefer to do it in CSS, just give `html`, `body`, and `core-scroll-header-panel` a height of 100%:\n\n    html, body {\n      height: 100%;\n      margin: 0;\n    }\n    core-scroll-header-panel {\n      height: 100%;\n    }\n\n`core-scroll-header-panel` works well with `core-toolbar` but can use any element \nthat represents a header by adding a `core-header` class to it.\n\n    <core-scroll-header-panel>\n      <core-toolbar>Header</core-toolbar>\n      <div>Content goes here...</div>\n    </core-scroll-header-panel>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core scroll header panel",
      "name": "core-scroll-header-panel"
    },
    {
      "ports": {
        "input": {
          "scrollTarget": {
            "name": "scrollTarget",
            "description": "When set, the given element is observed for scroll position.  When undefined,\nchildren can be placed inside and element itself can be used as the scrollable\nelement.",
            "type": "Element",
            "default": null,
            "title": "Scroll target"
          },
          "orient": {
            "name": "orient",
            "description": "Orientation of the scroller to be observed (`v` for vertical, `h` for horizontal)",
            "type": "boolean",
            "default": false,
            "title": "Orient"
          },
          "upperThreshold": {
            "name": "upperThreshold",
            "description": "Distance from the top (or left, for horizontal) bound of the scroller\nwhere the \"upper trigger\" will fire.",
            "type": "integer",
            "default": null,
            "title": "Upper threshold"
          },
          "lowerThreshold": {
            "name": "lowerThreshold",
            "description": "Distance from the bottom (or right, for horizontal) bound of the scroller\nwhere the \"lower trigger\" will fire.",
            "type": "integer",
            "default": null,
            "title": "Lower threshold"
          },
          "upperTriggered": {
            "name": "upperTriggered",
            "description": "Read-only value that tracks the triggered state of the upper threshold",
            "type": "boolean",
            "default": false,
            "title": "Upper triggered"
          },
          "lowerTriggered": {
            "name": "lowerTriggered",
            "description": "Read-only value that tracks the triggered state of the lower threshold",
            "type": "boolean",
            "default": false,
            "title": "Lower triggered"
          },
          "clearUpper": {
            "name": "clearUpper",
            "description": "Clear the upper threshold, following an `upper-trigger` event.",
            "title": "Clear upper",
            "async": true
          },
          "clearLower": {
            "name": "clearLower",
            "description": "Clear the lower threshold, following a `lower-trigger` event.",
            "title": "Clear lower",
            "async": true
          }
        },
        "output": {
          "upper-trigger": {
            "name": "upper-trigger",
            "description": "Fired when `upperTriggered` becomes `true`.",
            "title": "Upper trigger"
          },
          "lower-trigger": {
            "name": "lower-trigger",
            "description": "Fired when `lowerTriggered` becomes `true`.",
            "title": "Lower trigger"
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-scroll-threshold": "Polymer/core-scroll-threshold#master"
        }
      },
      "description": "`core-scroll-threshold` is a utility element that listens for `scroll` events from a\nscrollable region and fires events to indicate when the scroller has reached a pre-defined\nlimit, specified in pixels from the upper and lower bounds of the scrollable region.\n\nThis element may wrap a scrollable region and will listen for `scroll` events bubbling\nthrough it from its children.  In this case, care should be taken that only one scrollable\nregion with the same orientation as this element is contained within.  Alternatively,\nthe `scrollTarget` property can be set/bound to a non-child scrollable region, from which\nit will listen for events.\n\nOnce a threshold has been reached, a `lower-trigger` or `upper-trigger` event will\nbe fired, at which point the user may perform actions such as lazily-loading more data\nto be displayed.  After any work is done, the user must then clear the threshold by\ncalling the `clearUpper` or `clearLower` methods on this element, after which it will\nbegin listening again for the scroll position to reach the threshold again assuming\nthe content in the scrollable region has grown.  If the user no longer wishes to receive\nevents (e.g. all data has been exhausted), the threshold property in question (e.g.\n`lowerThreshold`) may be set to a falsy value to disable events and clear the associated\ntriggered property.\n\nExample:\n\n    <core-scroll-threshold id=\"threshold\" lowerThreshold=\"500\"\n      on-lower-trigger=\"{{loadMore}}\" lowerTriggered=\"{{spinnerShouldShow}}\">\n    </core-scroll-threshold>\n\n    ...\n\n    loadMore: function() {\n      this.asyncLoadStuffThen(function() {\n        this.$.threshold.clearLower();\n      }.bind(this));\n    }",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core scroll threshold",
      "name": "core-scroll-threshold"
    },
    {
      "ports": {
        "input": {
          "multi": {
            "name": "multi",
            "description": "If true, multiple selections are allowed.",
            "type": "boolean",
            "default": false,
            "title": "Multi"
          },
          "getSelection": {
            "name": "getSelection",
            "description": "Retrieves the selected item(s).\ngetSelection will return an array, otherwise it will return \nthe selected item or undefined if there is no selection.",
            "title": "Get selection",
            "async": true
          },
          "isSelected": {
            "name": "isSelected",
            "description": "Indicates if a given item is selected.",
            "title": "Is selected",
            "async": true,
            "type": "object",
            "properties": {
              "item": {
                "type": "any",
                "name": "item",
                "description": "The item whose selection state should be checked.",
                "title": "Item"
              }
            }
          },
          "select": {
            "name": "select",
            "description": "Set the selection state for a given `item`. If the multi property\nis true, then the selected state of `item` will be toggled; otherwise\nthe `item` will be selected.",
            "title": "Select",
            "async": true
          },
          "toggle": {
            "name": "toggle",
            "description": "Toggles the selection state for `item`.",
            "title": "Toggle",
            "async": true
          }
        },
        "output": {
          "core-select": {
            "name": "core-select",
            "description": "Fired when an item's selection state is changed. This event is fired both\nwhen an item is selected or deselected. The `isSelected` detail property\ncontains the selection state.",
            "title": "Core select",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "isSelected": {
                    "type": "boolean",
                    "name": "isSelected",
                    "description": "true for selection and false for de-selection",
                    "title": "Is selected"
                  },
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-selection": "Polymer/core-selection#master"
        }
      },
      "description": "The `<core-selection>` element is used to manage selection state. It has no\nvisual appearance and is typically used in conjunction with another element.\nFor example, [core-selector](#core-selector)\nuses a `<core-selection>` to manage selection.\n\nTo mark an item as selected, call the `select(item)` method on \n`<core-selection>`. The item itself is an argument to this method.\n\nThe `<core-selection>`element manages selection state for any given set of\nitems. When an item is selected, the `core-select` event is fired.\n\nThe attribute `multi` indicates if multiple items can be selected at once.\n  \nExample:\n \n    <polymer-element name=\"selection-example\">\n       <template>\n         <style>\n           polyfill-next-selector { content: ':host > .selected'; }\n           ::content > .selected {\n             font-weight: bold;\n             font-style: italic;\n           }\n         </style>\n         <ul on-tap=\"{{itemTapAction}}\">\n           <content></content>\n         </ul>\n         <core-selection id=\"selection\" multi\n                         on-core-select=\"{{selectAction}}\"></core-selection>\n       </template>\n       <script>\n         Polymer('selection-example', {\n           itemTapAction: function(e, detail, sender) {\n             this.$.selection.select(e.target);\n           },\n           selectAction: function(e, detail, sender) {\n             detail.item.classList.toggle('selected', detail.isSelected);\n           }\n         });\n       </script>\n    </polymer-element>\n\n    <selection-example>\n      <li>Red</li>\n      <li>Green</li>\n      <li>Blue</li>\n    </selection-example>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core selection",
      "name": "core-selection"
    },
    {
      "ports": {
        "input": {
          "selected": {
            "name": "selected",
            "description": "Gets or sets the selected element.  Default to use the index\nof the item element.\n\nIf you want a specific attribute value of the element to be\nused instead of index, set \"valueattr\" to that attribute name.\n\nExample:\n\n    <core-selector valueattr=\"label\" selected=\"foo\">\n      <div label=\"foo\"></div>\n      <div label=\"bar\"></div>\n      <div label=\"zot\"></div>\n    </core-selector>\n\nIn multi-selection this should be an array of values.\n\nExample:\n\n    <core-selector id=\"selector\" valueattr=\"label\" multi>\n      <div label=\"foo\"></div>\n      <div label=\"bar\"></div>\n      <div label=\"zot\"></div>\n    </core-selector>\n\n    this.$.selector.selected = ['foo', 'zot'];",
            "type": "Object",
            "default": null,
            "title": "Selected"
          },
          "multi": {
            "name": "multi",
            "description": "If true, multiple selections are allowed.",
            "type": "boolean",
            "default": false,
            "title": "Multi"
          },
          "valueattr": {
            "name": "valueattr",
            "description": "Specifies the attribute to be used for \"selected\" attribute.",
            "type": "string",
            "default": "name",
            "title": "Valueattr"
          },
          "selectedClass": {
            "name": "selectedClass",
            "description": "Specifies the CSS class to be used to add to the selected element.",
            "type": "string",
            "default": "core-selected",
            "title": "Selected class"
          },
          "selectedProperty": {
            "name": "selectedProperty",
            "description": "Specifies the property to be used to set on the selected element\nto indicate its active state.",
            "type": "string",
            "default": "",
            "title": "Selected property"
          },
          "selectedAttribute": {
            "name": "selectedAttribute",
            "description": "Specifies the attribute to set on the selected element to indicate\nits active state.",
            "type": "string",
            "default": "active",
            "title": "Selected attribute"
          },
          "selectedItem": {
            "name": "selectedItem",
            "description": "Returns the currently selected element. In multi-selection this returns\nan array of selected elements.\nNote that you should not use this to set the selection. Instead use\n`selected`.",
            "type": "Object",
            "default": null,
            "title": "Selected item"
          },
          "selectedModel": {
            "name": "selectedModel",
            "description": "In single selection, this returns the model associated with the\nselected element.\nNote that you should not use this to set the selection. Instead use\n`selected`.",
            "type": "Object",
            "default": null,
            "title": "Selected model"
          },
          "selectedIndex": {
            "name": "selectedIndex",
            "description": "In single selection, this returns the selected index.\nNote that you should not use this to set the selection. Instead use\n`selected`.",
            "type": "number",
            "default": -1,
            "title": "Selected index"
          },
          "excludedLocalNames": {
            "name": "excludedLocalNames",
            "description": "Nodes with local name that are in the list will not be included\nin the selection items.  In the following example, `items` returns four\n`core-item`'s and doesn't include `h3` and `hr`.\n\n    <core-selector excludedLocalNames=\"h3 hr\">\n      <h3>Header</h3>\n      <core-item>Item1</core-item>\n      <core-item>Item2</core-item>\n      <hr>\n      <core-item>Item3</core-item>\n      <core-item>Item4</core-item>\n    </core-selector>",
            "type": "string",
            "default": "",
            "title": "Excluded local names"
          },
          "target": {
            "name": "target",
            "description": "The target element that contains items.  If this is not set\ncore-selector is the container.",
            "type": "Object",
            "default": null,
            "title": "Target"
          },
          "itemsSelector": {
            "name": "itemsSelector",
            "description": "This can be used to query nodes from the target node to be used for\nselection items.  Note this only works if `target` is set\nand is not `core-selector` itself.\n\nExample:\n\n    <core-selector target=\"{{$.myForm}}\" itemsSelector=\"input[type=radio]\"></core-selector>\n    <form id=\"myForm\">\n      <label><input type=\"radio\" name=\"color\" value=\"red\"> Red</label> <br>\n      <label><input type=\"radio\" name=\"color\" value=\"green\"> Green</label> <br>\n      <label><input type=\"radio\" name=\"color\" value=\"blue\"> Blue</label> <br>\n      <p>color = {{color}}</p>\n    </form>",
            "type": "string",
            "default": "",
            "title": "Items selector"
          },
          "activateEvent": {
            "name": "activateEvent",
            "description": "The event that would be fired from the item element to indicate\nit is being selected.",
            "type": "string",
            "default": "tap",
            "title": "Activate event"
          },
          "notap": {
            "name": "notap",
            "description": "Set this to true to disallow changing the selection via the\n`activateEvent`.",
            "type": "boolean",
            "default": false,
            "title": "Notap"
          },
          "selectPrevious": {
            "name": "selectPrevious",
            "description": "Selects the previous item. This should be used in single selection only.\n\nwrap to the end",
            "title": "Select previous",
            "async": true,
            "type": "object",
            "properties": {
              "wrapped": {
                "type": "boolean",
                "name": "wrapped",
                "description": "if true and it is already at the first item,",
                "title": "Wrapped"
              }
            }
          },
          "selectNext": {
            "name": "selectNext",
            "description": "Selects the next item.  This should be used in single selection only.\n\nwrap to the front",
            "title": "Select next",
            "async": true,
            "type": "object",
            "properties": {
              "wrapped": {
                "type": "boolean",
                "name": "wrapped",
                "description": "if true and it is already at the last item,",
                "title": "Wrapped"
              }
            }
          }
        },
        "output": {
          "core-select": {
            "name": "core-select",
            "description": "Fired when an item's selection state is changed. This event is fired both\nwhen an item is selected or deselected. The `isSelected` detail property\ncontains the selection state.",
            "title": "Core select",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "isSelected": {
                    "type": "boolean",
                    "name": "isSelected",
                    "description": "true for selection and false for deselection",
                    "title": "Is selected"
                  },
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          },
          "core-activate": {
            "name": "core-activate",
            "description": "Fired when an item element is tapped.",
            "title": "Core activate",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-selector": "Polymer/core-selector#master"
        }
      },
      "description": "`<core-selector>` is used to manage a list of elements that can be selected.\n\nThe attribute `selected` indicates which item element is being selected.\nThe attribute `multi` indicates if multiple items can be selected at once.\nTapping on the item element would fire `core-activate` event. Use\n`core-select` event to listen for selection changes.\n\nExample:\n\n    <core-selector selected=\"0\">\n      <div>Item 1</div>\n      <div>Item 2</div>\n      <div>Item 3</div>\n    </core-selector>\n\n`<core-selector>` is not styled. Use the `core-selected` CSS class to style the selected element.\n\n    <style>\n      .item.core-selected {\n        background: #eee;\n      }\n    </style>\n    ...\n    <core-selector>\n      <div class=\"item\">Item 1</div>\n      <div class=\"item\">Item 2</div>\n      <div class=\"item\">Item 3</div>\n    </core-selector>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core selector",
      "name": "core-selector"
    },
    {
      "ports": {
        "input": {
          "direction": {
            "name": "direction",
            "description": "Possible values are `left`, `right`, `up` and `down`.",
            "type": "string",
            "default": "left",
            "title": "Direction"
          },
          "minSize": {
            "name": "minSize",
            "description": "Minimum width to which the splitter target can be sized, e.g. \n`minSize=\"100px\"`",
            "type": "string",
            "default": "",
            "title": "Min size"
          },
          "locked": {
            "name": "locked",
            "description": "Locks the split bar so it can't be dragged.",
            "type": "boolean",
            "default": false,
            "title": "Locked"
          },
          "allowOverflow": {
            "name": "allowOverflow",
            "description": "By default the parent and siblings of the splitter are set to overflow hidden. This helps\navoid elements bleeding outside the splitter regions. Set this property to true to allow\nthese elements to overflow.",
            "type": "boolean",
            "default": false,
            "title": "Allow overflow"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-splitter": "Polymer/core-splitter#master"
        }
      },
      "description": "`core-splitter` provides a split bar and dragging on the split bar\nwill resize the sibling element.  Use its `direction` property to indicate\nwhich sibling element to be resized and the orientation.  Usually you would want\nto use `core-splitter` along with flex layout so that the other sibling\nelement can be _flexible_.\n\nExample:\n\n    <div horizontal layout>\n      <div>left</div>\n      <core-splitter direction=\"left\"></core-splitter>\n      <div flex>right</div>\n    </div>\n\nIn the above example, dragging the splitter will resize the _left_ element.  And\nsince the parent container is a flexbox and the _right_ element has\n`flex`, the _right_ element will be auto-resized.\n\nFor horizontal splitter set `direction` to `up` or `down`.\n\nExample:\n\n    <div vertical layout>\n      <div>top</div>\n      <core-splitter direction=\"up\"></core-splitter>\n      <div flex>bottom</div>\n    </div>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core splitter",
      "name": "core-splitter"
    },
    {
      "ports": {
        "input": {
          "id": {
            "name": "id",
            "description": "The `id` property should be set if the `core-style` is a producer\nof styles. In this case, the `core-style` should have text content\nthat is cssText.",
            "type": "string",
            "default": "",
            "title": "Id"
          },
          "ref": {
            "name": "ref",
            "description": "The `ref` property should be set if the `core-style` element is a \nconsumer of styles. Set it to the `id` of the desired `core-style`\nelement.",
            "type": "string",
            "default": "",
            "title": "Ref"
          },
          "list": {
            "name": "list",
            "description": "The `list` is a map of all `core-style` producers stored by `id`. It \nshould be considered readonly. It's useful for nesting one `core-style`\ninside another.",
            "type": "object",
            "default": "{map of all `core-style` producers}",
            "title": "List"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-style": "Polymer/core-style#master"
        }
      },
      "description": "The `core-style` element helps manage styling inside other elements and can \nbe used to make themes. The `core-style` element can be either a producer \nor consumer of styling. If it has its `id` property set, it's a producer. \nElements that are producers should include css styling as their text content.\nIf a `core-style` has its `ref` property set, it's a consumer. A `core-style`\ntypically sets its `ref` property to the value of the `id` property of the\n`core-style` it wants to use. This allows a single producer to be used in \nmultiple places, for example, in many different elements.\n\nIt's common to place `core-style` producer elements inside HTMLImports.\nRemote stylesheets should be included this way, the &#64;import css mechanism is\nnot currently supported.\n\nHere's a basic example:\n\n    <polymer-element name=\"x-test\" noscript>\n      <template>\n        <core-style ref=\"x-test\"></core-style>\n        <content></content>\n      </template>\n    </polymer-element>\n\nThe `x-test` element above will be styled by any `core-style` elements that have\n`id` set to `x-test`. These `core-style` producers are separate from the element\ndefinition, allowing a user of the element to style it independent of the author's \nstyling. For example:\n\n    <core-style id=\"x-test\">\n      :host {\n        background-color: steelblue;\n      }\n    </core-style>\n\nThe content of the `x-test` `core-style` producer gets included inside the\nshadowRoot of the `x-test` element. If the content of the `x-test` producer\n`core-style` changes, all consumers of it are automatically kept in sync. This\nallows updating styling on the fly.\n\nThe `core-style` element also supports bindings, in which case the producer\n`core-style` element is the model. Here's an example:\n\n    <core-style id=\"x-test\">\n      :host {\n        background-color: {{myColor}};\n      }\n    </core-style>\n    <script>\n      document._currentScript.ownerDocument.getElementById('x-test').myColor = 'orange';\n    </script>\n\nFinally, to facilitate sharing data between `core-style` elements, all\n`core-style` elements have a `g` property which is set to the global \n`CoreStyle.g`. Here's an example:\n\n    <core-style id=\"x-test\">\n      :host {\n        background-color: {{g.myColor}};\n      }\n    </core-style>\n    <script>\n      CoreStyle.g.myColor = 'tomato';\n    </script>\n\nFinally, one `core-style` can be nested inside another. The `core-style`\nelement has a `list` property which is a map of all the `core-style` producers.\nA `core-style` producer's content is available via its `cssText` property. \nPutting this together:\n\n    <core-style id=\"common\">\n      :host {\n        font-family: sans-serif;\n      }\n    </core-style>\n\n    <core-style id=\"x-test\">\n      {{list.common.cssText}}\n\n      :host {\n        background-color: {{g.myColor}};\n      }\n    </core-style>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core style",
      "name": "core-style"
    },
    {
      "ports": {
        "input": {
          "src": {
            "name": "src",
            "description": "The URL of an image for the icon.",
            "type": "string",
            "default": "",
            "title": "Src"
          },
          "icon": {
            "name": "icon",
            "description": "Specifies the icon from the Polymer icon set.",
            "type": "string",
            "default": "",
            "title": "Icon"
          },
          "label": {
            "name": "label",
            "description": "Specifies the label for the menu item.",
            "type": "string",
            "default": "",
            "title": "Label"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-submenu": "Polymer/core-submenu#master"
        }
      },
      "description": "Use to create nested menus inside of `core-menu` elements.\n\n    <core-menu selected=\"0\">\n    \n      <core-submenu icon=\"settings\" label=\"Topics\">\n        <core-item label=\"Topic 1\"></core-item>\n        <core-item label=\"Topic 2\"></core-item>\n      </core-submenu>\n      \n      <core-submenu icon=\"settings\" label=\"Favorites\">\n        <core-item label=\"Favorite 1\"></core-item>\n        <core-item label=\"Favorite 2\"></core-item>\n        <core-item label=\"Favorite 3\"></core-item>\n      </core-submenu>\n      \n    </core-menu>\n    \nThere is a margin set on the submenu to indent the items.\nYou can override the margin by doing:\n\n    core-submenu::shadow #submenu {\n      margin-left: 20px;\n    }\n\nTo style the item for the submenu, do something like this:\n\n    core-submenu::shadow > #submenuItem {\n      color: blue;\n    }\n    \nTo style all the `core-item`s in the light DOM:\n\n    polyfill-next-selector { content: 'core-submenu > #submenu > core-item'; }\n    core-submenu > core-item {\n      color: red;\n    }\n    \nThe above will style `Topic1` and `Topic2` to have font color red.\n\n    <core-submenu icon=\"settings\" label=\"Topics\">\n      <core-item label=\"Topic1\"></core-item>\n      <core-item label=\"Topic2\"></core-item>\n    </core-submenu>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core submenu",
      "name": "core-submenu"
    },
    {
      "ports": {
        "input": {
          "justify": {
            "name": "justify",
            "description": "Controls how the items are aligned horizontally.\nOptions are `start`, `center`, `end`, `between` and `around`.",
            "type": "string",
            "default": "",
            "title": "Justify"
          },
          "middleJustify": {
            "name": "middleJustify",
            "description": "Controls how the items are aligned horizontally when they are placed\nin the middle.\nOptions are `start`, `center`, `end`, `between` and `around`.",
            "type": "string",
            "default": "",
            "title": "Middle justify"
          },
          "bottomJustify": {
            "name": "bottomJustify",
            "description": "Controls how the items are aligned horizontally when they are placed\nat the bottom.\nOptions are `start`, `center`, `end`, `between` and `around`.",
            "type": "string",
            "default": "",
            "title": "Bottom justify"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-toolbar": "Polymer/core-toolbar#master"
        }
      },
      "description": "`core-toolbar` is a horizontal bar containing items that can be used for\nlabel, navigation, search and actions.  The items place inside the \n`core-toolbar` are projected into a `horizontal center layout` container inside of \n`core-toolbar`'s Shadow DOM.  You can use flex attributes to control the items'\nsizing.\n\nExample:\n\n    <core-toolbar>\n      <core-icon-button icon=\"menu\" on-tap=\"{{menuAction}}\"></core-icon-button>\n      <div flex>Title</div>\n      <core-icon-button icon=\"more-vert\" on-tap=\"{{moreAction}}\"></core-icon-button>\n    </core-toolbar>\n\n`core-toolbar` has a standard height, but can made be taller by setting `tall`\nclass on the `core-toolbar`.  This will make the toolbar 3x the normal height.\n\n    <core-toolbar class=\"tall\">\n      <core-icon-button icon=\"menu\"></core-icon-button>\n    </core-toolbar>\n\nApply `medium-tall` class to make the toolbar medium tall.  This will make the\ntoolbar 2x the normal height.\n\n    <core-toolbar class=\"medium-tall\">\n      <core-icon-button icon=\"menu\"></core-icon-button>\n    </core-toolbar>\n\nWhen `tall`, items can pin to either the top (default), middle or bottom.  Use\n`middle` class for middle content and `bottom` class for bottom content.\n\n    <core-toolbar class=\"tall\">\n      <core-icon-button icon=\"menu\"></core-icon-button>\n      <div class=\"middle indent\">Middle Title</div>\n      <div class=\"bottom indent\">Bottom Title</div>\n    </core-toolbar>\n    \nFor `medium-tall` toolbar, the middle and bottom contents overlap and are\npinned to the bottom.  But `middleJustify` and `bottomJustify` attributes are \nstill honored separately.\n    \nTo make an element completely fit at the bottom of the toolbar, use `fit` along\nwith `bottom`.\n\n    <core-toolbar class=\"tall\">\n      <div id=\"progressBar\" class=\"bottom fit\"></div>\n    </core-toolbar>\n\n`core-toolbar` adapts to mobile/narrow layout when there is a `core-narrow` class set\non itself or any of its ancestors.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core toolbar",
      "name": "core-toolbar"
    },
    {
      "ports": {
        "input": {
          "label": {
            "name": "label",
            "description": "A simple string label for the tooltip to display. To display a rich\nHTML tooltip instead, omit `label` and include the `tip` attribute\non a child node of `core-tooltip`.",
            "type": "string",
            "default": null,
            "title": "Label"
          },
          "show": {
            "name": "show",
            "description": "Forces the tooltip to display. If `disabled` is set, this property is ignored.",
            "type": "boolean",
            "default": false,
            "title": "Show"
          },
          "position": {
            "name": "position",
            "description": "Positions the tooltip to the top, right, bottom, left of its content.",
            "type": "string",
            "default": "bottom",
            "title": "Position"
          },
          "noarrow": {
            "name": "noarrow",
            "description": "If true, the tooltip an arrow pointing towards the content.",
            "type": "boolean",
            "default": false,
            "title": "Noarrow"
          },
          "tipAttribute": {
            "name": "tipAttribute",
            "description": "Customizes the attribute used to specify which content\nis the rich HTML tooltip.",
            "type": "string",
            "default": "tip",
            "title": "Tip attribute"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-tooltip": "Polymer/core-tooltip#master"
        }
      },
      "description": "The `core-tooltip` element creates a hover tooltip centered for the content\nit contains. It can be positioned on the top|bottom|left|right of content using\nthe `position` attribute.\n\nTo include HTML in the tooltip, include the `tip` attribute on the relevant\ncontent.\n\n<b>Example</b>:\n\n    <core-tooltip label=\"I'm a tooltip\">\n      <span>Hover over me.</span>\n    </core-tooltip>\n\n<b>Example</b> - positioning the tooltip to the right:\n\n    <core-tooltip label=\"I'm a tooltip to the right\" position=\"right\">\n      <core-icon-button icon=\"drawer\"></core-icon-button>\n    </core-tooltip>\n\n<b>Example</b> - no arrow and showing by default:\n\n    <core-tooltip label=\"Tooltip with no arrow and always on\" noarrow show>\n      <img src=\"image.jpg\">\n    </core-tooltip>\n\n<b>Example</b> - disable the tooltip.\n\n    <core-tooltip label=\"Disabled label never shows\" disabled>\n      ...\n    </core-tooltip>\n\n<b>Example</b> - rich tooltip using the `tip` attribute:\n\n    <core-tooltip>\n      <div>Example of a rich information tooltip</div>\n      <div tip>\n        <img src=\"profile.jpg\">Foo <b>Bar</b> - <a href=\"#\">@baz</a>\n      </div>\n    </core-tooltip>\n\nBy default, the `tip` attribute specifies the HTML content for a rich tooltip.\nYou can customize this attribute with the `tipAttribute` attribute:\n\n    <core-tooltip tipAttribute=\"htmltooltip\">\n      <div>Example of a rich information tooltip</div>\n      <div htmltooltip>\n        ...\n      </div>\n    </core-tooltip>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core tooltip",
      "name": "core-tooltip"
    },
    {
      "ports": {
        "input": {
          "baseClass": {
            "name": "baseClass",
            "description": "The class that will be applied to all animated nodes.",
            "type": "string",
            "default": "\"core-transition\"",
            "title": "Base class"
          },
          "openedClass": {
            "name": "openedClass",
            "description": "The class that will be applied to nodes in the opened state.",
            "type": "string",
            "default": "\"core-opened\"",
            "title": "Opened class"
          },
          "closedClass": {
            "name": "closedClass",
            "description": "The class that will be applied to nodes in the closed state.",
            "type": "string",
            "default": "\"core-closed\"",
            "title": "Closed class"
          },
          "completeEventName": {
            "name": "completeEventName",
            "description": "Event to listen to for animation completion.",
            "type": "string",
            "default": "\"transitionEnd\"",
            "title": "Complete event name"
          },
          "transitionType": {
            "name": "transitionType",
            "description": "A secondary configuration attribute for the animation. The class\n`<baseClass>-<transitionType` is applied to the animated node during\n`setup`.",
            "type": "string",
            "title": "Transition type"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-transition-css": "Polymer/core-transition-css#master"
        }
      },
      "description": "`<core-transition-css>` implements CSS transitions as `<core-transition>` objects so they can be\nreused in a pluggable transition system such as in `<core-overlay>`. Currently this class has\nsome specific support to animate an element from and to the viewport such as a dialog, but you\ncan override it for different effects.\n\nExample:\n\nmy-css-transition.html:\n\n    <polymer-element name=\"my-css-transition\" extends=\"core-transition-css\">\n    <template>\n        <style>\n            :host(.my-transition) {\n                opacity: 0;\n                transition: transform 1s ease-out, opacity 1s ease-out;\n            }\n            :host(.my-transition.my-opened) {\n                opacity: 1;\n                transform: none;\n            }\n            :host(.my-transition-top) {\n                transform: translateY(-100vh);\n            }\n            :host(.my-transition-bottom) {\n                transform: translateY(100vh);\n            }\n        </style>\n    </template>\n    <script>\n      Polymer({\n        baseClass: 'my-transition',\n        openedClass: 'my-opened'\n      });\n    </script>\n    </polymer-element>\n\n    <my-css-transition id=\"my-transition-top\" transitionType=\"top\"></my-css-transition>\n    <my-css-transition id=\"my-transition-bottom\" transitionType=\"bottom\"></my-css-transition>\n\nmy-css-transition-demo.html\n\n    <link href=\"components/core-meta/core-meta.html\" rel=\"import\">\n    <link href=\"my-css-transition.html\">\n\n    <div id=\"animate-me\"></div>\n\n    <script>\n        // Get the core-transition\n        var meta = document.createElement('core-meta');\n        meta.type = 'transition';\n        var transition1 = meta.byId('my-transition-top');\n\n        // Set up the animation\n        var animated = document.getElementById('animate-me');\n        transition1.setup(animated);\n        transition1.go(animated, {opened: true});\n    </script>\n\nThe first element in the template of a `<core-transition-css>` object should be a stylesheet. It\nwill be injected to the scope of the animated node in the `setup` function. The node is initially\ninvisible with `opacity: 0`, and you can transition it to an \"opened\" state by passing\n`{opened: true}` to the `go` function.\n\nAll nodes being animated will get the class `my-transition` added in the `setup` function.\nAdditionally, the class `my-transition-<transitionType>` will be applied. You can use the\n`transitionType` attribute to implement several different behaviors with the same\n`<core-transition-css>` object. In the above example, `<my-css-transition>` implements both\nsliding the node from the top of the viewport and from the bottom of the viewport.\n\nAvailable transitions\n---------------------\n\n`<core-transition-css>` includes several commonly used transitions.\n\n`core-transition-fade`: Animates from `opacity: 0` to `opacity: 1` when it opens.\n\n`core-transition-center`: Zooms the node into the final size.\n\n`core-transition-top`: Slides the node into the final position from the top.\n\n`core-transition-bottom`: Slides the node into the final position from the bottom.\n\n`core-transition-left`: Slides the node into the final position from the left.\n\n`core-transition-right`: Slides the node into the final position from the right.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core transition css",
      "name": "core-transition-css"
    },
    {
      "ports": {
        "input": {
          "go": {
            "name": "go",
            "description": "Run the animation.",
            "title": "Go",
            "async": true,
            "type": "object",
            "properties": {
              "node": {
                "type": "Node",
                "name": "node",
                "description": "The node to apply the animation on",
                "title": "Node"
              },
              "state": {
                "type": "Object",
                "name": "state",
                "description": "State info",
                "title": "State"
              }
            }
          },
          "setup": {
            "name": "setup",
            "description": "Set up the animation. This may include injecting a stylesheet,\napplying styles, creating a web animations object, etc.. This",
            "title": "Setup",
            "async": true,
            "type": "object",
            "properties": {
              "node": {
                "type": "Node",
                "name": "node",
                "description": "The animated node",
                "title": "Node"
              }
            }
          },
          "teardown": {
            "name": "teardown",
            "description": "Tear down the animation.",
            "title": "Teardown",
            "async": true,
            "type": "object",
            "properties": {
              "node": {
                "type": "Node",
                "name": "node",
                "description": "The animated node",
                "title": "Node"
              }
            }
          },
          "complete": {
            "name": "complete",
            "description": "Called when the animation completes. This function also fires the\n`core-transitionend` event.",
            "title": "Complete",
            "async": true,
            "type": "object",
            "properties": {
              "node": {
                "type": "Node",
                "name": "node",
                "description": "The animated node",
                "title": "Node"
              }
            }
          },
          "listenOnce": {
            "name": "listenOnce",
            "description": "Utility function to listen to an event on a node once.",
            "title": "Listen once",
            "async": true,
            "type": "object",
            "properties": {
              "node": {
                "type": "Node",
                "name": "node",
                "description": "The animated node",
                "title": "Node"
              },
              "event": {
                "type": "string",
                "name": "event",
                "description": "Name of an event",
                "title": "Event"
              },
              "fn": {
                "type": "Function",
                "name": "fn",
                "description": "Event handler",
                "title": "Fn"
              },
              "args": {
                "type": "Array",
                "name": "args",
                "description": "Additional arguments to pass to `fn`",
                "title": "Args"
              }
            }
          }
        },
        "output": {
          "core-transitionend": {
            "name": "core-transitionend",
            "description": "Fired when the animation finishes.",
            "title": "Core transitionend",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "node": {
                    "type": "Object",
                    "name": "node",
                    "description": "The animated node",
                    "title": "Node"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "core-transition": "Polymer/core-transition#master"
        }
      },
      "description": "`<core-transition>` is an abstraction of an animation. It is used to implement pluggable\ntransitions, for example in `<core-overlay>`. You can extend this class to create a custom\nanimation, instantiate it, and import it where you need the animation.\n\nAll instances of `<core-transition>` are stored in a single database with `type=transition`.\nFor more about the database, please see the documentation for `<core-meta>`.\n\nEach instance of `<core-transition>` objects are shared across all the clients, so you should\nnot store state information specific to the animated element in the transition. Rather, store\nit on the element.\n\nExample:\n\nmy-transition.html:\n\n    <polymer-element name=\"my-transition\" extends=\"core-transition\">\n        <script>\n            go: function(node) {\n                node.style.transition = 'opacity 1s ease-out';\n                node.style.opacity = 0;\n            }\n        </script>\n    </polymer-element>\n\n    <my-transition id=\"my-fade-out\"></my-transition>\n\nmy-transition-demo.html:\n\n    <link href=\"components/core-meta/core-meta.html\" rel=\"import\">\n    <link href=\"my-transition.html\" rel=\"import\">\n\n    <div id=\"animate-me\"></div>\n\n    <script>\n        // Get the core-transition\n        var meta = document.createElement('core-meta');\n        meta.type = 'transition';\n        var transition = meta.byId('my-fade-out');\n\n        // Run the animation\n        var animated = document.getElementById('animate-me');\n        transition.go(animated);\n    </script>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core transition",
      "name": "core-transition"
    },
    {
      "ports": {
        "input": {
          "request": {
            "name": "request",
            "description": "Sends a HTTP request to the server and returns the XHR object.",
            "title": "Request",
            "async": true,
            "type": "object",
            "properties": {
              "inOptions": {
                "type": "Object",
                "name": "inOptions",
                "title": "In options",
                "properties": {
                  "url": {
                    "type": "String",
                    "name": "url",
                    "description": "The url to which the request is sent.",
                    "title": "Url"
                  },
                  "method": {
                    "type": "String",
                    "name": "method",
                    "description": "The HTTP method to use, default is GET.",
                    "title": "Method"
                  },
                  "sync": {
                    "type": "boolean",
                    "name": "sync",
                    "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                    "title": "Sync"
                  },
                  "params": {
                    "type": "Object",
                    "name": "params",
                    "description": "Data to be sent to the server.",
                    "title": "Params"
                  },
                  "body": {
                    "type": "Object",
                    "name": "body",
                    "description": "The content for the request body for POST method.",
                    "title": "Body"
                  },
                  "headers": {
                    "type": "Object",
                    "name": "headers",
                    "description": "HTTP request headers.",
                    "title": "Headers"
                  },
                  "responseType": {
                    "type": "String",
                    "name": "responseType",
                    "description": "The response type. Default is 'text'.",
                    "title": "Response type"
                  },
                  "withCredentials": {
                    "type": "boolean",
                    "name": "withCredentials",
                    "description": "Whether or not to send credentials on the request. Default is false.",
                    "title": "With credentials"
                  },
                  "callback": {
                    "type": "Object",
                    "name": "callback",
                    "description": "Called when request is completed.",
                    "title": "Callback"
                  }
                }
              }
            }
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "core-xhr": "Polymer/core-xhr#master"
        }
      },
      "description": "core-xhr can be used to perform XMLHttpRequests.\n\n    <core-xhr id=\"xhr\"></core-xhr>\n    ...\n    this.$.xhr.request({url: url, params: params, callback: callback});",
      "type": "polymer",
      "ns": "polymer",
      "title": "Core xhr",
      "name": "core-xhr"
    },
    {
      "ports": {
        "input": {
          "closeSelector": {
            "name": "closeSelector",
            "description": "",
            "type": "string",
            "default": "[affirmative],[dismissive]",
            "title": "Close selector"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-action-dialog": "Polymer/paper-action-dialog#master"
        }
      },
      "description": "Material Design: <a href=\"http://www.google.com/design/spec/components/dialogs.html\">Dialogs</a>\n\n`paper-action-dialog` is a `paper-dialog` a row of buttons at the bottom that\nindicate user action. The action buttons do not scroll with the dialog body.\n\nThe buttons should have either the `affirmative` or `dismissive` attribute. See\nthe Material Design spec for more info.\n\nExample:\n\n    <paper-action-dialog heading=\"Dialog Title\">\n      <p>Some content</p>\n      <paper-button dismissive>More Info</paper-button>\n      <paper-button affirmative>Decline</paper-button>\n      <paper-button affirmative>Accept</paper-button>\n    </paper-action-dialog>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper action dialog",
      "name": "paper-action-dialog"
    },
    {
      "ports": {
        "input": {
          "target": {
            "name": "target",
            "description": "The textarea that should auto grow.",
            "type": "HTMLTextAreaElement",
            "default": null,
            "title": "Target"
          },
          "rows": {
            "name": "rows",
            "description": "The initial number of rows.",
            "type": "number",
            "default": 1,
            "title": "Rows"
          },
          "maxRows": {
            "name": "maxRows",
            "description": "The maximum number of rows this element can grow to until it\nscrolls. 0 means no maximum.",
            "type": "number",
            "default": 0,
            "title": "Max rows"
          },
          "update": {
            "name": "update",
            "description": "Sizes this element to fit the input value. This function is automatically called\nwhen the user types in new input, but you must call this function if the value\nis updated imperatively. Takes as parameter the textarea containing the input.",
            "title": "Update",
            "async": true
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-autogrow-textarea": "Polymer/paper-autogrow-textarea#master"
        }
      },
      "description": "`paper-autogrow-textarea` is an element containing a textarea that grows in height as more\nlines of input are entered. Unless an explicit height or the `maxRows` property is set, it will\nnever scroll.\n\nExample:\n\n    <paper-autogrow-textarea id=\"a1\">\n        <textarea id=\"t1\"></textarea>\n    </paper-autogrow-textarea>\n\nBecause the `textarea`'s `value` property is not observable, if you set the `value` imperatively\nyou must call `update` to notify this element the value has changed.\n\nExample:\n\n    /* using example HTML above */\n    t1.value = 'some\\ntext';\n    a1.update(t1);",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper autogrow textarea",
      "name": "paper-autogrow-textarea"
    },
    {
      "ports": {
        "input": {
          "raised": {
            "name": "raised",
            "description": "If true, the button will be styled with a shadow.",
            "type": "boolean",
            "default": false,
            "title": "Raised"
          },
          "recenteringTouch": {
            "name": "recenteringTouch",
            "description": "By default the ripple emanates from where the user touched the button.\nSet this to true to always center the ripple.",
            "type": "boolean",
            "default": false,
            "title": "Recentering touch"
          },
          "fill": {
            "name": "fill",
            "description": "By default the ripple expands to fill the button. Set this to false to\nconstrain the ripple to a circle within the button.",
            "type": "boolean",
            "default": true,
            "title": "Fill"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-button-base": "Polymer/paper-button-base#master"
        }
      },
      "description": "`paper-button-base` is the base class for button-like elements with ripple and optional shadow.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper button base",
      "name": "paper-button-base"
    },
    {
      "ports": {
        "input": {
          "raised": {
            "name": "raised",
            "description": "If true, the button will be styled with a shadow.",
            "type": "boolean",
            "default": false,
            "title": "Raised"
          },
          "recenteringTouch": {
            "name": "recenteringTouch",
            "description": "By default the ripple emanates from where the user touched the button.\nSet this to true to always center the ripple.",
            "type": "boolean",
            "default": false,
            "title": "Recentering touch"
          },
          "fill": {
            "name": "fill",
            "description": "By default the ripple expands to fill the button. Set this to true to\nconstrain the ripple to a circle within the button.",
            "type": "boolean",
            "default": true,
            "title": "Fill"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-button": "Polymer/paper-button#master"
        }
      },
      "description": "Material Design: <a href=\"http://www.google.com/design/spec/components/buttons.html\">Buttons</a>\n\n`paper-button` is a button. When the user touches the button, a ripple effect emanates\nfrom the point of contact. It may be flat or raised. A raised button is styled with a\nshadow.\n\nExample:\n\n    <paper-button>flat button</paper-button>\n    <paper-button raised>raised button</paper-button>\n    <paper-button noink>No ripple effect</paper-button>\n\nYou may use custom DOM in the button body to create a variety of buttons. For example, to\ncreate a button with an icon and some text:\n\n    <paper-button>\n      <core-icon icon=\"favorite\"></core-icon>\n      custom button content\n    </paper-button>\n\nStyling\n-------\n\nStyle the button with CSS as you would a normal DOM element.\n\n    /* make #my-button green with yellow text */\n    #my-button {\n        background: green;\n        color: yellow;\n    }\n\nBy default, the ripple is the same color as the foreground at 25% opacity. You may\ncustomize the color using this selector:\n\n    /* make #my-button use a blue ripple instead of foreground color */\n    #my-button::shadow #ripple {\n      color: blue;\n    }\n\nThe opacity of the ripple is not customizable via CSS.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper button",
      "name": "paper-button"
    },
    {
      "ports": {
        "input": {
          "target": {
            "name": "target",
            "description": "The id of the textinput or textarea that should be monitored.",
            "type": "string",
            "default": null,
            "title": "Target"
          },
          "showCounter": {
            "name": "showCounter",
            "description": "If false, don't show the character counter. Used in conjunction with\n`paper-input-decorator's` `error` field.",
            "type": "boolean",
            "default": true,
            "title": "Show counter"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-char-counter": "Polymer/paper-char-counter#master"
        }
      },
      "description": "Material Design: <a href=\"http://www.google.com/design/spec/components/text-fields.html#text-fields-character-counter\">Character counter</a>\n\n`paper-char-counter` adds a character counter for paper input fields with a character restriction in place.\n\nExample:\n\n    <paper-input-decorator>\n      <input id=\"input1\" is=\"core-input\" maxlength=\"5\">\n      <paper-char-counter class=\"footer\" target=\"input1\"></paper-char-counter>\n    </paper-input-decorator>\n\nTheming\n-------\n\n`paper-char-counter` uses `paper-input-decorator`'s error `core-style` for global theming.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper char counter",
      "name": "paper-char-counter"
    },
    {
      "ports": {
        "input": {},
        "output": {
          "change": {
            "name": "change",
            "description": "Fired when the checked state changes due to user interaction.",
            "title": "Change"
          },
          "core-change": {
            "name": "core-change",
            "description": "Fired when the checked state changes.",
            "title": "Core change"
          }
        }
      },
      "dependencies": {
        "bower": {
          "paper-checkbox": "Polymer/paper-checkbox#master"
        }
      },
      "description": "`paper-checkbox` is a button that can be either checked or unchecked.  User\ncan tap the checkbox to check or uncheck it.  Usually you use checkboxes\nto allow user to select multiple options from a set.  If you have a single\nON/OFF option, avoid using a single checkbox and use `paper-toggle-button`\ninstead.\n\nExample:\n\n    <paper-checkbox></paper-checkbox>\n\n    <paper-checkbox checked></paper-checkbox>\n    \nStyling checkbox:\n\nTo change the ink color for checked state:\n\n    paper-checkbox::shadow #ink[checked] {\n      color: #4285f4;\n    }\n    \nTo change the checkbox checked color:\n\n    paper-checkbox::shadow #checkbox.checked {\n      border-color: #4285f4;\n    }\n\nTo change the ink color for unchecked state:\n\n    paper-checkbox::shadow #ink {\n      color: #b5b5b5;\n    }\n\nTo change the checbox unchecked color:\n\n    paper-checkbox::shadow #checkbox {\n      border-color: #b5b5b5;\n    }",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper checkbox",
      "name": "paper-checkbox"
    },
    {
      "ports": {
        "input": {
          "heading": {
            "name": "heading",
            "description": "The title of the dialog.",
            "type": "string",
            "default": "",
            "title": "Heading"
          },
          "transition": {
            "name": "transition",
            "description": "",
            "type": "string",
            "default": "",
            "title": "Transition"
          },
          "layered": {
            "name": "layered",
            "description": "",
            "type": "boolean",
            "default": true,
            "title": "Layered"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-dialog-base": "Polymer/paper-dialog-base#master"
        }
      },
      "description": "Material Design: <a href=\"http://www.google.com/design/spec/components/dialogs.html\">Dialogs</a>\n\n`paper-dialog-base` is a base class used to implement Material Design styled\ndialogs.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper dialog base",
      "name": "paper-dialog-base"
    },
    {
      "ports": {
        "input": {
          "heading": {
            "name": "heading",
            "description": "The title of the dialog.",
            "type": "string",
            "default": "",
            "title": "Heading"
          },
          "transition": {
            "name": "transition",
            "description": "",
            "type": "string",
            "default": "",
            "title": "Transition"
          },
          "layered": {
            "name": "layered",
            "description": "",
            "type": "boolean",
            "default": true,
            "title": "Layered"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-dialog": "Polymer/paper-dialog#master"
        }
      },
      "description": "Material Design: <a href=\"http://www.google.com/design/spec/components/dialogs.html\">Dialogs</a>\n\n`paper-dialog` is an overlay with a drop shadow.\n\nExample:\n\n    <paper-dialog heading=\"Dialog Title\">\n      <p>Some content</p>\n    </paper-dialog>\n\nStyling\n-------\n\nBecause a `paper-dialog` is `layered` by default, you need to use the `/deep/`\ncombinator to style all instances of the `paper-dialog`. Style the position,\ncolors and other inherited properties of the dialog using the\n`html /deep/ paper-dialog` selector. Use the `html /deep/ paper-dialog::shadow #scroller` selector to size the dialog. Note that if you provided actions, the height\nof the actions will be added to the height of the dialog.\n\n    html /deep/ paper-dialog {\n        color: green;\n    }\n\n    html /deep/ paper-dialog::shadow #scroller {\n        height: 300px;\n        width: 300px;\n    }\n\nTransitions\n-----------\n\nYou can use transitions provided by `core-transition` with this element.\n\n    <paper-dialog transition=\"core-transition-center\">\n      <p>Some content</p>\n    </paper-dialog>\n\nAccessibility\n-------------\n\nBy default, the `aria-label` will be set to the value of the `heading` attribute.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper dialog",
      "name": "paper-dialog"
    },
    {
      "ports": {
        "input": {
          "label": {
            "name": "label",
            "description": "A label for the control. The label is displayed if no item is selected.",
            "type": "string",
            "default": "Select an item",
            "title": "Label"
          },
          "openedIcon": {
            "name": "openedIcon",
            "description": "The icon to display when the drop-down is opened.",
            "type": "string",
            "default": "arrow-drop-up",
            "title": "Opened icon"
          },
          "closedIcon": {
            "name": "closedIcon",
            "description": "The icon to display when the drop-down is closed.",
            "type": "string",
            "default": "arrow-drop-down",
            "title": "Closed icon"
          }
        },
        "output": {
          "core-select": {
            "name": "core-select",
            "description": "Fired when an item's selection state is changed. This event is fired both\nwhen an item is selected or deselected. The `isSelected` detail property\ncontains the selection state.",
            "title": "Core select",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "isSelected": {
                    "type": "boolean",
                    "name": "isSelected",
                    "description": "true for selection and false for deselection",
                    "title": "Is selected"
                  },
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "paper-dropdown-menu": "Polymer/paper-dropdown-menu#master"
        }
      },
      "description": "`paper-dropdown-menu` works together with `paper-dropdown` and `core-menu` to\nimplement a drop-down menu. The currently selected item is displayed in the\ncontrol. If no item is selected, the `label` is displayed instead.\n\nThe child element with the class `dropdown` will be used as the drop-down\nmenu. It should be a `paper-dropdown` or other overlay element. You should\nalso provide a `core-selector` or other selector element, such as `core-menu`,\nin the drop-down. You should apply the class `menu` to the selector element.\n\nExample:\n\n    <paper-dropdown-menu label=\"Your favorite pastry\">\n        <paper-dropdown class=\"dropdown\">\n            <core-menu class=\"menu\">\n                <paper-item>Croissant</paper-item>\n                <paper-item>Donut</paper-item>\n                <paper-item>Financier</paper-item>\n                <paper-item>Madeleine</paper-item>\n            </core-menu>\n        </paper-dropdown>\n    </paper-dropdown-menu>\n\nThis example renders a drop-down menu with 4 options.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper dropdown menu",
      "name": "paper-dropdown-menu"
    },
    {
      "ports": {
        "input": {
          "duration": {
            "name": "duration",
            "description": "The duration of the transition in ms. You can also set the duration by\nsetting a `duration` attribute on the target:\n\n   <paper-dropdown duration=\"1000\"></paper-dropdown>",
            "type": "number",
            "default": 500,
            "title": "Duration"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-dropdown-transition": "Polymer/paper-dropdown-transition#master"
        }
      },
      "description": "`paper-dropdown-transition` is a transition for `paper-dropdown`.\n\nAdd the class `menu` to a `core-selector` child of the `paper-dropdown` to\nenable the optional list cascade transition.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper dropdown transition",
      "name": "paper-dropdown-transition"
    },
    {
      "ports": {
        "input": {
          "relatedTarget": {
            "name": "relatedTarget",
            "description": "The element associated with this dropdown, usually the element that triggers\nthe menu. If unset, this property will default to the target's parent node\nor shadow host.",
            "type": "Node",
            "title": "Related target"
          },
          "halign": {
            "name": "halign",
            "description": "The horizontal alignment of the popup relative to `relatedTarget`. `left`\nmeans the left edges are aligned together. `right` means the right edges\nare aligned together.",
            "type": "'left' | 'right'",
            "default": "'left'",
            "title": "Halign"
          },
          "valign": {
            "name": "valign",
            "description": "The vertical alignment of the popup relative to `relatedTarget`. `top` means\nthe top edges are aligned together. `bottom` means the bottom edges are\naligned together.",
            "type": "'top' | 'bottom'",
            "default": "'top'",
            "title": "Valign"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-dropdown": "Polymer/paper-dropdown#master"
        }
      },
      "description": "`paper-dropdown` is a `core-dropdown` with a `paper-shadow`. By default, it\nis animated on open with `paper-dropdown-transition`. Use this element with\n`paper-dropdown-menu` or `paper-menu-button` to implement UI controls that\nopen a drop-down.\n\nExample:\n\n    <paper-dropdown>\n      Hi!\n    </paper-dropdown>\n\nTheming\n-------\n\nStyle the background color of the dropdown with these selectors:\n\n    paper-dropdown::shadow #ripple,\n    paper-dropdown::shadow #background {\n        background-color: green;\n    }",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper dropdown",
      "name": "paper-dropdown"
    },
    {
      "ports": {
        "input": {
          "src": {
            "name": "src",
            "description": "The URL of an image for the icon. If the src property is specified,\nthe icon property should not be.",
            "type": "string",
            "default": "",
            "title": "Src"
          },
          "icon": {
            "name": "icon",
            "description": "Specifies the icon name or index in the set of icons available in\nthe icon's icon set. If the icon property is specified,\nthe src property should not be.",
            "type": "string",
            "default": "",
            "title": "Icon"
          },
          "mini": {
            "name": "mini",
            "description": "Set this to true to style this is a \"mini\" FAB.",
            "type": "boolean",
            "default": false,
            "title": "Mini"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-fab": "Polymer/paper-fab#master"
        }
      },
      "description": "Material Design: <a href=\"http://www.google.com/design/spec/components/buttons.html\">Button</a>\n\n`paper-fab` is a floating action button. It contains an image placed in the center and\ncomes in two sizes: regular size and a smaller size by applying the attribute `mini`. When\nthe user touches the button, a ripple effect emanates from the center of the button.\n\nYou may import `core-icons` to use with this element, or provide an URL to a custom icon.\nSee `core-iconset` for more information about how to use a custom icon set.\n\nExample:\n\n    <link href=\"path/to/core-icons/core-icons.html\" rel=\"import\">\n\n    <paper-fab icon=\"add\"></paper-fab>\n    <paper-fab mini icon=\"favorite\"></paper-fab>\n    <paper-fab src=\"star.png\"></paper-fab>\n\nStyling\n-------\n\nStyle the button with CSS as you would a normal DOM element. If you are using the icons\nprovided by `core-icons`, the icon will inherit the foreground color of the button.\n\n    /* make a blue \"cloud\" button */\n    <paper-fab icon=\"cloud\" style=\"color: blue;\"></paper-fab>\n\nBy default, the ripple is the same color as the foreground at 25% opacity. You may\ncustomize the color using this selector:\n\n    /* make #my-button use a blue ripple instead of foreground color */\n    #my-button::shadow #ripple {\n      color: blue;\n    }\n\nThe opacity of the ripple is not customizable via CSS.\n\nAccessibility\n-------------\n\nThe button is accessible by default if you use the `icon` property. By default, the\n`aria-label` attribute will be set to the `icon` property. If you use a custom icon,\nyou should ensure that the `aria-label` attribute is set.\n\n    <paper-fab src=\"star.png\" aria-label=\"star\"></paper-fab>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper fab",
      "name": "paper-fab"
    },
    {
      "ports": {
        "input": {
          "src": {
            "name": "src",
            "description": "The URL of an image for the icon. If the src property is specified,\nthe icon property should not be.",
            "type": "string",
            "default": "",
            "title": "Src"
          },
          "icon": {
            "name": "icon",
            "description": "Specifies the icon name or index in the set of icons available in\nthe icon's icon set. If the icon property is specified,\nthe src property should not be.",
            "type": "string",
            "default": "",
            "title": "Icon"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-icon-button": "Polymer/paper-icon-button#master"
        }
      },
      "description": "Material Design: <a href=\"http://www.google.com/design/spec/components/buttons.html\">Buttons</a>\n\n`paper-icon-button` is a button with an image placed at the center. When the user touches\nthe button, a ripple effect emanates from the center of the button.\n\n`paper-icon-button` includes a default icon set.  Use `icon` to specify which icon\nfrom the icon set to use.\n\n    <paper-icon-button icon=\"menu\"></paper-icon-button>\n\nSee [`core-iconset`](#core-iconset) for more information about\nhow to use a custom icon set.\n\nExample:\n\n    <link href=\"path/to/core-icons/core-icons.html\" rel=\"import\">\n\n    <paper-icon-button icon=\"favorite\"></paper-icon-button>\n    <paper-icon-button src=\"star.png\"></paper-icon-button>\n\nStyling\n-------\n\nStyle the button with CSS as you would a normal DOM element. If you are using the icons\nprovided by `core-icons`, they will inherit the foreground color of the button.\n\n    /* make a red \"favorite\" button */\n    <paper-icon-button icon=\"favorite\" style=\"color: red;\"></paper-icon-button>\n\nBy default, the ripple is the same color as the foreground at 25% opacity. You may\ncustomize the color using this selector:\n\n    /* make #my-button use a blue ripple instead of foreground color */\n    #my-button::shadow #ripple {\n      color: blue;\n    }\n\nThe opacity of the ripple is not customizable via CSS.\n\nAccessibility\n-------------\n\nThe button is accessible by default if you use the `icon` property. By default, the\n`aria-label` attribute will be set to the `icon` property. If you use a custom icon,\nyou should ensure that the `aria-label` attribute is set.\n\n    <paper-icon-button src=\"star.png\" aria-label=\"star\"></paper-icon-button>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper icon button",
      "name": "paper-icon-button"
    },
    {
      "ports": {
        "input": {
          "label": {
            "name": "label",
            "description": "The label for this input. It normally appears as grey text inside\nthe text input and disappears once the user enters text.",
            "type": "string",
            "default": "",
            "title": "Label"
          },
          "floatingLabel": {
            "name": "floatingLabel",
            "description": "If true, the label will \"float\" above the text input once the\nuser enters text instead of disappearing.",
            "type": "boolean",
            "default": false,
            "title": "Floating label"
          },
          "disabled": {
            "name": "disabled",
            "description": "Set to true to style the element as disabled.",
            "type": "boolean",
            "default": false,
            "title": "Disabled"
          },
          "labelVisible": {
            "name": "labelVisible",
            "description": "Use this property to override the automatic label visibility.\nIf this property is set to `true` or `false`, the label visibility\nwill respect this value instead of be based on whether there is\na non-null value in the input.",
            "type": "boolean",
            "default": false,
            "title": "Label visible"
          },
          "isInvalid": {
            "name": "isInvalid",
            "description": "Set this property to true to show the error message.",
            "type": "boolean",
            "default": false,
            "title": "Is invalid"
          },
          "autoValidate": {
            "name": "autoValidate",
            "description": "Set this property to true to validate the input as the user types.\nThis will not validate when changing the input programmatically; call\n`validate()` instead.",
            "type": "boolean",
            "default": false,
            "title": "Auto validate"
          },
          "error": {
            "name": "error",
            "description": "The message to display if the input value fails validation. If this\nis unset or the empty string, a default message is displayed depending\non the type of validation error.",
            "type": "string",
            "title": "Error"
          },
          "validate": {
            "name": "validate",
            "description": "Validate the input using HTML5 Constraints.",
            "return": {
              "type": "boolean",
              "description": "True if the input is valid."
            },
            "title": "Validate",
            "async": true
          },
          "updateLabelVisibility": {
            "name": "updateLabelVisibility",
            "description": "Updates the label visibility based on a value. This is handled automatically\nif the user is typing, but if you imperatively set the input value you need\nto call this function.",
            "title": "Update label visibility",
            "async": true
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-input-decorator": "Polymer/paper-input-decorator#master"
        }
      },
      "description": "Material Design: <a href=\"http://www.google.com/design/spec/components/text-fields.html\">Text fields</a>\n\n`paper-input-decorator` adds Material Design input field styling and animations to an element.\n\nExample:\n\n    <paper-input-decorator label=\"Your Name\">\n        <input is=\"core-input\">\n    </paper-input-decorator>\n\n    <paper-input-decorator floatingLabel label=\"Your address\">\n        <textarea></textarea>\n    </paper-input-decorator>\n\nTheming\n-------\n\n`paper-input-decorator` uses `core-style` for global theming. The following options are available:\n\n- `CoreStyle.g.paperInput.labelColor` - The inline label, floating label, error message and error icon color when the input does not have focus.\n- `CoreStyle.g.paperInput.focusedColor` - The floating label and the underline color when the input has focus.\n- `CoreStyle.g.paperInput.invalidColor` - The error message, the error icon, the floating label and the underline's color when the input is invalid and has focus.\n\nTo add custom styling to only some elements, use these selectors:\n\n    paper-input-decorator /deep/ .label-text,\n    paper-input-decorator /deep/ .error {\n        /* inline label,  floating label, error message and error icon color when the input is unfocused */\n        color: green;\n    }\n\n    paper-input-decorator /deep/ ::-webkit-input-placeholder {\n        /* platform specific rules for placeholder text */\n        color: green;\n    }\n    paper-input-decorator /deep/ ::-moz-placeholder {\n        color: green;\n    }\n    paper-input-decorator /deep/ :-ms-input-placeholder {\n        color: green;\n    }\n\n    paper-input-decorator /deep/ .unfocused-underline {\n        /* line color when the input is unfocused */\n        background-color: green;\n    }\n\n    paper-input-decorator[focused] /deep/ .floated-label .label-text {\n        /* floating label color when the input is focused */\n        color: orange;\n    }\n\n    paper-input-decorator /deep/ .focused-underline {\n        /* line color when the input is focused */\n        background-color: orange;\n    }\n\n    paper-input-decorator.invalid[focused] /deep/ .floated-label .label-text,\n    paper-input-decorator[focused] /deep/ .error {\n        /* floating label, error message nad error icon color when the input is invalid and focused */\n        color: salmon;\n    }\n\n    paper-input-decorator.invalid /deep/ .focused-underline {\n        /* line and color when the input is invalid and focused */\n        background-color: salmon;\n    }\n\nForm submission\n---------------\n\nYou can use inputs decorated with this element in a `form` as usual.\n\nValidation\n----------\n\nBecause you provide the `input` element to `paper-input-decorator`, you can use any validation library\nor the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation\">HTML5 Constraints Validation API</a>\nto implement validation. Set the `isInvalid` attribute when the input is validated, and provide an\nerror message in the `error` attribute.\n\nExample:\n\n    <paper-input-decorator id=\"paper1\" error=\"Value must start with a number!\">\n        <input id=\"input1\" is=\"core-input\" pattern=\"^[0-9].*\">\n    </paper-input-decorator>\n    <button onclick=\"validate()\"></button>\n    <script>\n        function validate() {\n            var decorator = document.getElementById('paper1');\n            var input = document.getElementById('input1');\n            decorator.isInvalid = !input.validity.valid;\n        }\n    </script>\n\nExample to validate as the user types:\n\n    <template is=\"auto-binding\">\n        <paper-input-decorator id=\"paper2\" error=\"Value must start with a number!\" isInvalid=\"{{!$.input2.validity.valid}}\">\n            <input id=\"input2\" is=\"core-input\" pattern=\"^[0-9].*\">\n        </paper-input-decorator>\n    </template>\n\nAccessibility\n-------------\n\n`paper-input-decorator` will automatically set the `aria-label` attribute on the nested input\nto the value of `label`. Do not set the `placeholder` attribute on the nested input, as it will\nconflict with this element.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper input decorator",
      "name": "paper-input-decorator"
    },
    {
      "ports": {
        "input": {
          "label": {
            "name": "label",
            "description": "The label for this input. It normally appears as grey text inside\nthe text input and disappears once the user enters text.",
            "type": "string",
            "default": "",
            "title": "Label"
          },
          "floatingLabel": {
            "name": "floatingLabel",
            "description": "If true, the label will \"float\" above the text input once the\nuser enters text instead of disappearing.",
            "type": "boolean",
            "default": false,
            "title": "Floating label"
          },
          "disabled": {
            "name": "disabled",
            "description": "Set to true to style the element as disabled.",
            "type": "boolean",
            "default": false,
            "title": "Disabled"
          },
          "value": {
            "name": "value",
            "description": "The current value of the input.",
            "type": "String",
            "default": "''",
            "title": "Value"
          },
          "committedValue": {
            "name": "committedValue",
            "description": "The most recently committed value of the input.",
            "type": "String",
            "default": "''",
            "title": "Committed value"
          },
          "focus": {
            "name": "focus",
            "description": "Focuses the `input`.",
            "title": "Focus",
            "async": true
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-input": "Polymer/paper-input#master"
        }
      },
      "description": "Material Design: <a href=\"http://www.google.com/design/spec/components/text-fields.html#text-fields-single-line-text-field\">Single line text field</a>\n\n`paper-input` is a single-line text field for user input. It is a convenience element composed of\na `paper-input-decorator` and a `input is=\"core-input\"`.\n\nExample:\n\n    <paper-input label=\"Your Name\"></paper-input>\n\nIf you need more control over the `input` element, use `paper-input-decorator`.\n\nTheming\n-------\n\n`paper-input` can be styled similarly to `paper-input-decorator`.\n\nForm submission\n---------------\n\nUnlike inputs using `paper-input-decorator` directly, `paper-input` does not work out of\nthe box with the native `form` element. This is because the native `form` is not aware of\nshadow DOM and does not treat `paper-input` as a form element.\n\nUse `paper-input-decorator` directly, or see\n<a href=\"https://github.com/garstasio/ajax-form\">`ajax-form`</a> for a possible solution\nto submitting a `paper-input`.\n\nValidation\n----------\n\nUse `paper-input-decorator` if you would like to implement validation.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper input",
      "name": "paper-input"
    },
    {
      "ports": {
        "input": {
          "raised": {
            "name": "raised",
            "description": "If true, the button will be styled with a shadow.",
            "type": "boolean",
            "default": false,
            "title": "Raised"
          },
          "recenteringTouch": {
            "name": "recenteringTouch",
            "description": "By default the ripple emanates from where the user touched the button.\nSet this to true to always center the ripple.",
            "type": "boolean",
            "default": false,
            "title": "Recentering touch"
          },
          "fill": {
            "name": "fill",
            "description": "By default the ripple expands to fill the button. Set this to false to\nconstrain the ripple to a circle within the button.",
            "type": "boolean",
            "default": true,
            "title": "Fill"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-item": "Polymer/paper-item#master"
        }
      },
      "description": "Material Design: <a href=\"http://www.google.com/design/spec/components/menus.html\">Menus</a>\n\n`paper-item` is a simple item object for use in menus. When the user touches the item, a ripple\neffect emanates from the point of contact. If used in a `core-selector`, the selected item will\nbe highlighted.\n\nExample:\n\n    <core-menu>\n        <paper-item>Cut</paper-item>\n        <paper-item>Copy</paper-item>\n        <paper-item>Paste</paper-item>\n    </core-menu>\n\nLinks\n-----\n\nTo use as a link, put an `<a>` element in the item. You may also use the `noink` attribute to\nprevent the ripple from \"freezing\" during a page navigation.\n\nExample:\n\n    <paper-item noink>\n        <a href=\"http://www.polymer-project.org\" layout horizontal center>Polymer</a>\n    </paper-item>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper item",
      "name": "paper-item"
    },
    {
      "ports": {
        "input": {
          "opened": {
            "name": "opened",
            "description": "True if the menu is open.",
            "type": "boolean",
            "default": false,
            "title": "Opened"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-menu-button": "Polymer/paper-menu-button#master"
        }
      },
      "description": "`paper-menu-button` works together with a button and a `paper-dropdown` to\nimplement a button that displays a drop-down when tapped on.\n\nThe child element with the class `dropdown` will be used as the drop-down\nmenu. It should be a `paper-dropdown` or other overlay element.\n\nExample:\n\n    <paper-menu-button>\n        <paper-icon-button icon=\"menu\" noink></paper-icon-button>\n        <paper-dropdown class=\"dropdown\">\n            <core-menu class=\"menu\">\n                <paper-item>Share</paper-item>\n                <paper-item>Settings</paper-item>\n                <paper-item>Help</paper-item>\n            </core-menu>\n        </paper-dropdown>\n    </paper-menu-button>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper menu button",
      "name": "paper-menu-button"
    },
    {
      "ports": {
        "input": {
          "secondaryProgress": {
            "name": "secondaryProgress",
            "description": "The number that represents the current secondary progress.",
            "type": "number",
            "default": 0,
            "title": "Secondary progress"
          },
          "indeterminate": {
            "name": "indeterminate",
            "description": "Use an indeterminate progress indicator.",
            "type": "boolean",
            "default": false,
            "title": "Indeterminate"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-progress": "Polymer/paper-progress#master"
        }
      },
      "description": "The progress bars are for situations where the percentage completed can be \ndetermined. They give users a quick sense of how much longer an operation \nwill take.\n\nExample:\n\n    <paper-progress value=\"10\"></paper-progress>\n    \nThere is also a secondary progress which is useful for displaying intermediate \nprogress, such as the buffer level during a streaming playback progress bar.\n\nExample:\n\n    <paper-progress value=\"10\" secondaryProgesss=\"30\"></paper-progress>\n\nStyling progress bar:\n\nTo change the active progress bar color:\n\n    paper-progress::shadow #activeProgress {\n      background-color: #e91e63;\n    }\n\nTo change the secondary progress bar color:\n\n    paper-progress::shadow #secondaryProgress {\n      background-color: #f8bbd0;\n    }\n    \nTo change the progress bar background color:\n\n    paper-progress::shadow #progressContainer {\n      background-color: #64ffda;\n    }",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper progress",
      "name": "paper-progress"
    },
    {
      "ports": {
        "input": {
          "checked": {
            "name": "checked",
            "description": "Gets or sets the state, `true` is checked and `false` is unchecked.",
            "type": "boolean",
            "default": false,
            "title": "Checked"
          },
          "label": {
            "name": "label",
            "description": "The label for the radio button.",
            "type": "string",
            "default": "",
            "title": "Label"
          },
          "toggles": {
            "name": "toggles",
            "description": "Normally the user cannot uncheck the radio button by tapping once\nchecked.  Setting this property to `true` makes the radio button\ntoggleable from checked to unchecked.",
            "type": "boolean",
            "default": false,
            "title": "Toggles"
          },
          "disabled": {
            "name": "disabled",
            "description": "If true, the user cannot interact with this element.",
            "type": "boolean",
            "default": false,
            "title": "Disabled"
          }
        },
        "output": {
          "change": {
            "name": "change",
            "description": "Fired when the checked state changes due to user interaction.",
            "title": "Change"
          },
          "core-change": {
            "name": "core-change",
            "description": "Fired when the checked state changes.",
            "title": "Core change"
          }
        }
      },
      "dependencies": {
        "bower": {
          "paper-radio-button": "Polymer/paper-radio-button#master"
        }
      },
      "description": "`paper-radio-button` is a button that can be either checked or unchecked.\nUser can tap the radio button to check it.  But it cannot be unchecked by\ntapping once checked.\n\nUse `paper-radio-group` to group a set of radio buttons.  When radio buttons\nare inside a radio group, only one radio button in the group can be checked.\n\nExample:\n\n    <paper-radio-button></paper-radio-button>\n    \nStyling radio button:\n\nTo change the ink color for checked state:\n\n    paper-radio-button::shadow #ink[checked] {\n      color: #4285f4;\n    }\n    \nTo change the radio checked color:\n    \n    paper-radio-button::shadow #onRadio {\n      background-color: #4285f4;\n    }\n\n    paper-radio-button[checked]::shadow #offRadio {\n      border-color: #4285f4;\n    }\n\nTo change the ink color for unchecked state:\n\n    paper-radio-button::shadow #ink {\n      color: #b5b5b5;\n    }\n    \nTo change the radio unchecked color:\n    \n    paper-radio-button::shadow #offRadio {\n      border-color: #b5b5b5;\n    }",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper radio button",
      "name": "paper-radio-button"
    },
    {
      "ports": {
        "input": {
          "noink": {
            "name": "noink",
            "description": "If true, ink ripple effect is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Noink"
          },
          "nobar": {
            "name": "nobar",
            "description": "If true, the bottom bar to indicate the selected tab will not be shown.",
            "type": "boolean",
            "default": false,
            "title": "Nobar"
          },
          "noslide": {
            "name": "noslide",
            "description": "If true, the slide effect for the bottom bar is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Noslide"
          },
          "scrollable": {
            "name": "scrollable",
            "description": "If true, tabs are scrollable and the tab width is based on the label width.",
            "type": "boolean",
            "default": false,
            "title": "Scrollable"
          },
          "disableDrag": {
            "name": "disableDrag",
            "description": "If true, dragging on the tabs to scroll is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Disable drag"
          },
          "hideScrollButton": {
            "name": "hideScrollButton",
            "description": "If true, scroll buttons (left/right arrow) will be hidden for scrollable tabs.",
            "type": "boolean",
            "default": false,
            "title": "Hide scroll button"
          },
          "updateBar": {
            "name": "updateBar",
            "description": "Invoke this to update the size and position of the bottom bar.  Usually\nyou only need to call this if the `paper-tabs` is initially hidden and\nlater becomes visible.",
            "title": "Update bar",
            "async": true
          }
        },
        "output": {
          "core-select": {
            "name": "core-select",
            "description": "Fired when an item's selection state is changed. This event is fired both\nwhen an item is selected or deselected. The `isSelected` detail property\ncontains the selection state.",
            "title": "Core select",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "isSelected": {
                    "type": "boolean",
                    "name": "isSelected",
                    "description": "true for selection and false for deselection",
                    "title": "Is selected"
                  },
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          },
          "core-activate": {
            "name": "core-activate",
            "description": "Fired when an item element is tapped.",
            "title": "Core activate",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "item": {
                    "type": "Object",
                    "name": "item",
                    "description": "the item element",
                    "title": "Item"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "paper-radio-group": "Polymer/paper-radio-group#master"
        }
      },
      "description": "`paper-radio-group` allows user to select only one radio button from a set.\nChecking one radio button that belongs to a radio group unchecks any \npreviously checked radio button within the same group. Use\n`selected` to get or set the selected radio button.\n\nExample:\n\n    <paper-radio-group selected=\"small\">\n      <paper-radio-button name=\"small\" label=\"Small\"></paper-radio-button>\n      <paper-radio-button name=\"medium\" label=\"Medium\"></paper-radio-button>\n      <paper-radio-button name=\"large\" label=\"Large\"></paper-radio-button>\n    </paper-radio-group>\n\nSee <a href=\"../paper-radio-button/\">paper-radio-button</a> for more\ninformation about `paper-radio-button`.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper radio group",
      "name": "paper-radio-group"
    },
    {
      "ports": {
        "input": {
          "initialOpacity": {
            "name": "initialOpacity",
            "description": "The initial opacity set on the wave.",
            "type": "number",
            "default": 0,
            "title": "Initial opacity"
          },
          "opacityDecayVelocity": {
            "name": "opacityDecayVelocity",
            "description": "How fast (opacity per second) the wave fades out.",
            "type": "number",
            "default": 0,
            "title": "Opacity decay velocity"
          }
        },
        "output": {
          "core-transitionend": {
            "name": "core-transitionend",
            "description": "Fired when the animation finishes. This is useful if you want to wait until the ripple\nanimation finishes to perform some action.",
            "title": "Core transitionend",
            "type": "object",
            "properties": {
              "detail": {
                "type": "Object",
                "name": "detail",
                "title": "Detail",
                "properties": {
                  "node": {
                    "type": "Object",
                    "name": "node",
                    "description": "The animated node",
                    "title": "Node"
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "bower": {
          "paper-ripple": "Polymer/paper-ripple#master"
        }
      },
      "description": "`paper-ripple` provides a visual effect that other paper elements can\nuse to simulate a rippling effect emanating from the point of contact.  The\neffect can be visualized as a concentric circle with motion.\n\nExample:\n\n    <paper-ripple></paper-ripple>\n\n`paper-ripple` listens to \"down\" and \"up\" events so it would display ripple\neffect when touches on it.  You can also defeat the default behavior and\nmanually route the down and up actions to the ripple element.  Note that it is\nimportant if you call downAction() you will have to make sure to call upAction()\nso that `paper-ripple` would end the animation loop.\n\nExample:\n\n    <paper-ripple id=\"ripple\" style=\"pointer-events: none;\"></paper-ripple>\n    ...\n    downAction: function(e) {\n      this.$.ripple.downAction({x: e.x, y: e.y});\n    },\n    upAction: function(e) {\n      this.$.ripple.upAction();\n    }\n\nStyling ripple effect:\n\n  Use CSS color property to style the ripple:\n\n    paper-ripple {\n      color: #4285f4;\n    }\n\n  Note that CSS color property is inherited so it is not required to set it on\n  the `paper-ripple` element directly.\n\nBy default, the ripple is centered on the point of contact.  Apply `recenteringTouch` \nclass to have the ripple grow toward the center of its container.\n\n    <paper-ripple class=\"recenteringTouch\"></paper-ripple>\n\nApply `circle` class to make the rippling effect within a circle.\n\n    <paper-ripple class=\"circle\"></paper-ripple>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper ripple",
      "name": "paper-ripple"
    },
    {
      "ports": {
        "input": {
          "z": {
            "name": "z",
            "description": "The z-depth of this shadow, from 0-5. Setting this property\nafter element creation has no effect. Use `setZ()` instead.",
            "type": "number",
            "default": 1,
            "title": "Z"
          },
          "animated": {
            "name": "animated",
            "description": "Set this to true to animate the shadow when setting a new\n`z` value.",
            "type": "boolean",
            "default": false,
            "title": "Animated"
          },
          "setZ": {
            "name": "setZ",
            "description": "Set the z-depth of the shadow. This should be used after element\ncreation instead of setting the z property directly.",
            "title": "Set z",
            "async": true
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-shadow": "Polymer/paper-shadow#master"
        }
      },
      "description": "`paper-shadow` is a container that renders two shadows on top of each other to\ncreate the effect of a lifted piece of paper.\n\nExample:\n\n    <paper-shadow z=\"1\">\n      ... card content ...\n    </paper-shadow>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper shadow",
      "name": "paper-shadow"
    },
    {
      "ports": {
        "input": {
          "snaps": {
            "name": "snaps",
            "description": "If true, the slider thumb snaps to tick marks evenly spaced based\non the `step` property value.",
            "type": "boolean",
            "default": false,
            "title": "Snaps"
          },
          "pin": {
            "name": "pin",
            "description": "If true, a pin with numeric value label is shown when the slider thumb \nis pressed.  Use for settings for which users need to know the exact \nvalue of the setting.",
            "type": "boolean",
            "default": false,
            "title": "Pin"
          },
          "disabled": {
            "name": "disabled",
            "description": "If true, this slider is disabled.  A disabled slider cannot be tapped\nor dragged to change the slider value.",
            "type": "boolean",
            "default": false,
            "title": "Disabled"
          },
          "secondaryProgress": {
            "name": "secondaryProgress",
            "description": "The number that represents the current secondary progress.",
            "type": "number",
            "default": 0,
            "title": "Secondary progress"
          },
          "editable": {
            "name": "editable",
            "description": "If true, an input is shown and user can use it to set the slider value.",
            "type": "boolean",
            "default": false,
            "title": "Editable"
          },
          "immediateValue": {
            "name": "immediateValue",
            "description": "The immediate value of the slider.  This value is updated while the user\nis dragging the slider.",
            "type": "number",
            "default": 0,
            "title": "Immediate value"
          }
        },
        "output": {
          "core-change": {
            "name": "core-change",
            "description": "Fired when the slider's value changes.",
            "title": "Core change"
          },
          "change": {
            "name": "change",
            "description": "Fired when the slider's value changes due to user interaction.\n\nChanges to the slider's value due to changes in an underlying\nbound variable will not trigger this event.",
            "title": "Change"
          }
        }
      },
      "dependencies": {
        "bower": {
          "paper-slider": "Polymer/paper-slider#master"
        }
      },
      "description": "`paper-slider` allows user to select a value from a range of values by\nmoving the slider thumb.  The interactive nature of the slider makes it a \ngreat choice for settings that reflect intensity levels, such as volume, \nbrightness, or color saturation.\n\nExample:\n\n    <paper-slider></paper-slider>\n\nUse `min` and `max` to specify the slider range.  Default is 0 to 100.\n\nExample:\n\n    <paper-slider min=\"10\" max=\"200\" value=\"110\"></paper-slider>\n\nStyling slider:\n\nTo change the slider progress bar color:\n\n    paper-slider::shadow #sliderBar::shadow #activeProgress {\n      background-color: #0f9d58;\n    }\n\nTo change the slider knob color:\n\n    paper-slider::shadow #sliderKnobInner {\n      background-color: #0f9d58;\n    }\n\nTo change the slider pin color:\n\n    paper-slider::shadow #sliderKnobInner::before {\n      background-color: #0f9d58;\n    }\n\nTo change the slider pin's font color:\n\n    paper-slider::shadow #sliderKnob > #sliderKnobInner::after {\n      color: #0f9d58\n    }\n\nTo change the slider secondary progress bar color:\n\n    paper-slider::shadow #sliderBar::shadow #secondaryProgress {\n      background-color: #0f9d58;\n    }",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper slider",
      "name": "paper-slider"
    },
    {
      "ports": {
        "input": {
          "active": {
            "name": "active",
            "description": "Displays the spinner.",
            "type": "boolean",
            "default": false,
            "title": "Active"
          },
          "alt": {
            "name": "alt",
            "description": "Alternative text content for accessibility support.\nIf alt is present, it will add an aria-label whose content matches alt when active.\nIf alt is not present, it will default to 'loading' as the alt value.",
            "type": "string",
            "default": "loading",
            "title": "Alt"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-spinner": "Polymer/paper-spinner#master"
        }
      },
      "description": "Element providing material design circular spinner.\n\n##### Example\n\n    <paper-spinner active></paper-spinner>\n\nThe default spinner cycles between blue, red, yellow and green. It can be customized so\nthat it uses one color only.\n\n##### Example\n\n    <style shim-shadowdom>\n      paper-spinner.blue::shadow .circle {\n        border-color: #4285f4;\n      }\n    </style>\n\n    <paper-spinner class=\"blue\" active></paper-spinner>\n\nAlt attribute should be set to provide adequate context for accessibility. If not provided,\nit defaults to 'loading'.\nEmpty alt can be provided to mark the element as decorative if alternative content is provided\nin another form (e.g. a text block following the spinner).\n\n##### Example\n  <paper-spinner alt=\"Loading contacts list\" active></paper-spinner>",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper spinner",
      "name": "paper-spinner"
    },
    {
      "ports": {
        "input": {
          "noink": {
            "name": "noink",
            "description": "If true, ink ripple effect is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Noink"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-tab": "Polymer/paper-tab#master"
        }
      },
      "description": "`paper-tab` is styled to look like a tab.  It should be used in conjunction with\n`paper-tabs`.\n\nExample:\n\n    <paper-tabs selected=\"0\">\n      <paper-tab>TAB 1</paper-tab>\n      <paper-tab>TAB 2</paper-tab>\n      <paper-tab>TAB 3</paper-tab>\n    </paper-tabs>\n    \nStyling tab:\n\nTo change the ink color:\n\n    .pink paper-tab::shadow #ink {\n      color: #ff4081;\n    }",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper tab",
      "name": "paper-tab"
    },
    {
      "ports": {
        "input": {
          "noink": {
            "name": "noink",
            "description": "If true, ink ripple effect is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Noink"
          },
          "nobar": {
            "name": "nobar",
            "description": "If true, the bottom bar to indicate the selected tab will not be shown.",
            "type": "boolean",
            "default": false,
            "title": "Nobar"
          },
          "noslide": {
            "name": "noslide",
            "description": "If true, the slide effect for the bottom bar is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Noslide"
          },
          "scrollable": {
            "name": "scrollable",
            "description": "If true, tabs are scrollable and the tab width is based on the label width.",
            "type": "boolean",
            "default": false,
            "title": "Scrollable"
          },
          "disableDrag": {
            "name": "disableDrag",
            "description": "If true, dragging on the tabs to scroll is disabled.",
            "type": "boolean",
            "default": false,
            "title": "Disable drag"
          },
          "hideScrollButton": {
            "name": "hideScrollButton",
            "description": "If true, scroll buttons (left/right arrow) will be hidden for scrollable tabs.",
            "type": "boolean",
            "default": false,
            "title": "Hide scroll button"
          },
          "updateBar": {
            "name": "updateBar",
            "description": "Invoke this to update the size and position of the bottom bar.  Usually\nyou only need to call this if the `paper-tabs` is initially hidden and\nlater becomes visible.",
            "title": "Update bar",
            "async": true
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "paper-tabs": "Polymer/paper-tabs#master"
        }
      },
      "description": "`paper-tabs` is a `core-selector` styled to look like tabs. Tabs make it easy to \nexplore and switch between different views or functional aspects of an app, or \nto browse categorized data sets.\n\nUse `selected` property to get or set the selected tab.\n\nExample:\n\n    <paper-tabs selected=\"0\">\n      <paper-tab>TAB 1</paper-tab>\n      <paper-tab>TAB 2</paper-tab>\n      <paper-tab>TAB 3</paper-tab>\n    </paper-tabs>\n\nSee <a href=\"#paper-tab\">paper-tab</a> for more information about \n`paper-tab`.\n\nA common usage for `paper-tabs` is to use it along with `core-pages` to switch\nbetween different views.\n\n    <paper-tabs selected=\"{{selected}}\">\n      <paper-tab>Tab 1</paper-tab>\n      <paper-tab>Tab 2</paper-tab>\n      <paper-tab>Tab 3</paper-tab>\n    </paper-tabs>\n  \n    <core-pages selected=\"{{selected}}>\n      <div>Page 1</div>\n      <div>Page 2</div>\n      <div>Page 3</div>\n    </core-pages>\n    \n`paper-tabs` adapt to mobile/narrow layout when there is a `core-narrow` class set\non itself or any of its ancestors.\n\nTo use links in tabs, add `link` attribute to `paper-tabs` and put an `<a>`\nelement in `paper-tab`.\n\nExample:\n\n    <paper-tabs selected=\"0\" link>\n      <paper-tab>\n        <a href=\"#link1\" horizontal center-center layout>TAB ONE</a>\n      </paper-tab>\n      <paper-tab>\n        <a href=\"#link2\" horizontal center-center layout>TAB TWO</a>\n      </paper-tab>\n      <paper-tab>\n        <a href=\"#link3\" horizontal center-center layout>TAB THREE</a>\n      </paper-tab>\n    </paper-tabs>\n\nStyling tabs:\n\nTo change the sliding bar color:\n\n    paper-tabs.pink::shadow #selectionBar {\n      background-color: #ff4081;\n    }\n    \nTo change the ink ripple color:\n\n    paper-tabs.pink paper-tab::shadow #ink {\n      color: #ff4081;\n    }",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper tabs",
      "name": "paper-tabs"
    },
    {
      "ports": {
        "input": {
          "text": {
            "name": "text",
            "description": "The text shows in a toast.",
            "type": "string",
            "default": "",
            "title": "Text"
          },
          "duration": {
            "name": "duration",
            "description": "The duration in milliseconds to show the toast.",
            "type": "number",
            "default": 3000,
            "title": "Duration"
          },
          "opened": {
            "name": "opened",
            "description": "Set opened to true to show the toast and to false to hide it.",
            "type": "boolean",
            "default": false,
            "title": "Opened"
          },
          "responsiveWidth": {
            "name": "responsiveWidth",
            "description": "Min-width when the toast changes to narrow layout.  In narrow layout,\nthe toast fits at the bottom of the screen when opened.",
            "type": "string",
            "default": "480px",
            "title": "Responsive width"
          },
          "swipeDisabled": {
            "name": "swipeDisabled",
            "description": "If true, the toast can't be swiped.",
            "type": "boolean",
            "default": false,
            "title": "Swipe disabled"
          },
          "autoCloseDisabled": {
            "name": "autoCloseDisabled",
            "description": "By default, the toast will close automatically if the user taps\noutside it or presses the escape key. Disable this behavior by setting\nthe `autoCloseDisabled` property to true.",
            "type": "boolean",
            "default": false,
            "title": "Auto close disabled"
          },
          "toggle": {
            "name": "toggle",
            "description": "Toggle the opened state of the toast.",
            "title": "Toggle",
            "async": true
          },
          "show": {
            "name": "show",
            "description": "Show the toast for the specified duration",
            "title": "Show",
            "async": true
          },
          "dismiss": {
            "name": "dismiss",
            "description": "Dismiss the toast and hide it.",
            "title": "Dismiss",
            "async": true
          }
        },
        "output": {
          "core-overlay-open": {
            "name": "core-overlay-open",
            "description": "Fired when the `paper-toast`'s `opened` property changes.",
            "title": "Core overlay open",
            "type": "object",
            "properties": {
              "detail": {
                "type": "boolean",
                "name": "detail",
                "description": "the opened state",
                "title": "Detail"
              }
            }
          },
          "core-overlay-open-completed": {
            "name": "core-overlay-open-completed",
            "description": "Fired when the `paper-toast` has completely opened.",
            "title": "Core overlay open completed"
          },
          "core-overlay-close-completed": {
            "name": "core-overlay-close-completed",
            "description": "Fired when the `paper-toast` has completely closed.",
            "title": "Core overlay close completed"
          }
        }
      },
      "dependencies": {
        "bower": {
          "paper-toast": "Polymer/paper-toast#master"
        }
      },
      "description": "`paper-toast` provides lightweight feedback about an operation in a small popup \nat the base of the screen on mobile and at the lower left on desktop. Toasts are \nabove all other elements on screen, including the FAB.\n\nToasts automatically disappear after a timeout or after user interaction \nelsewhere on the screen, whichever comes first. Toasts can be swiped off \nscreen.  There can be only one on the screen at a time.\n\nExample:\n\n    <paper-toast text=\"Your draft has been discarded.\" onclick=\"discardDraft(el)\"></paper-toast>\n    \n    <script>\n      function discardDraft(el) {\n        el.show();\n      }\n    </script>\n    \nAn action button can be presented in the toast.\n\nExample (using Polymer's data-binding features):\n\n    <paper-toast id=\"toast2\" text=\"Connection timed out. Showing limited messages.\">\n      <div style=\"color: blue;\" on-tap=\"{{retry}}\">Retry</div>\n    </paper-toast>\n    \nPositioning toast:\n\nA standard toast appears near the lower left of the screen.  You can change the\nposition by overriding bottom and left positions.\n\n    paper-toast {\n      bottom: 40px;\n      left: 10px;\n    }\n    \nTo position the toast to the right:\n\n    paper-toast {\n      right: 10px;\n      left: auto;\n    } \n  \nTo make it fit at the bottom of the screen:\n\n    paper-toast {\n      bottom: 0;\n      left: 0;\n      width: 100%;\n    }\n  \nWhen the screen size is smaller than the `responsiveWidth` (default to 480px),\nthe toast will automatically fits at the bottom of the screen.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper toast",
      "name": "paper-toast"
    },
    {
      "ports": {
        "input": {
          "checked": {
            "name": "checked",
            "description": "Gets or sets the state, `true` is checked and `false` is unchecked.",
            "type": "boolean",
            "default": false,
            "title": "Checked"
          },
          "disabled": {
            "name": "disabled",
            "description": "If true, the toggle button is disabled.  A disabled toggle button cannot\nbe tapped or dragged to change the checked state.",
            "type": "boolean",
            "default": false,
            "title": "Disabled"
          }
        },
        "output": {
          "change": {
            "name": "change",
            "description": "Fired when the checked state changes due to user interaction.",
            "title": "Change"
          },
          "core-change": {
            "name": "core-change",
            "description": "Fired when the checked state changes.",
            "title": "Core change"
          }
        }
      },
      "dependencies": {
        "bower": {
          "paper-toggle-button": "Polymer/paper-toggle-button#master"
        }
      },
      "description": "`paper-toggle-button` provides a ON/OFF switch that user can toggle the state\nby tapping or by dragging the swtich.\n\nExample:\n\n    <paper-toggle-button></paper-toggle-button>\n\nStyling toggle button:\n\nTo change the toggle color:\n\n    paper-toggle-button::shadow .toggle {\n      background-color: #9c27b0;\n    }\n\nTo change the ink color:\n    \n    paper-toggle-button::shadow .toggle-ink {\n      color: #009688;\n    }\n\nTo change the checked toggle color:\n\n    paper-toggle-button::shadow [checked] .toggle {\n      background-color: #4285f4;\n    }\n\nTo change the checked ink color:\n\n    paper-toggle-button::shadow [checked] .toggle-ink {\n      color: #4285f4;\n    }\n\nTo change the toggle bar and toggle button colors separately:\n\n    paper-toggle-button::shadow .toggle-bar {\n      background-color: #5677fc;\n    }\n\n    paper-toggle-button::shadow .toggle-button {\n      background-color: #9c27b0;\n    }",
      "type": "polymer",
      "ns": "polymer",
      "title": "Paper toggle button",
      "name": "paper-toggle-button"
    },
    {
      "ports": {
        "input": {
          "responsiveWidth": {
            "name": "responsiveWidth",
            "description": "When the browser window size is smaller than the `responsiveWidth`, \n`sampler-scaffold` changes to a narrow layout. In narrow layout, \nthe drawer will be stacked on top of the main panel.",
            "type": "string",
            "title": "Responsive width"
          },
          "label": {
            "name": "label",
            "description": "Sampler label.",
            "type": "string",
            "title": "Label"
          }
        },
        "output": {}
      },
      "dependencies": {
        "bower": {
          "sampler-scaffold": "Polymer/sampler-scaffold#master"
        }
      },
      "description": "`sampler-scaffold` provides a responsive layout for elements sampler.\n\nExampler:\n\n    <sampler-scaffold label=\"HTML Input Elements\">\n\n      <core-item label=\"String\" url=\"demos/string.html\"></core-item>\n      <core-item label=\"Checkbox\" url=\"demos/checkbox.html\"></core-item>\n      <core-item label=\"Radio\" url=\"demos/radio.html\"></core-item>\n      <core-item label=\"Range\" url=\"demos/range.html\"></core-item>\n      <core-item label=\"Color\" url=\"demos/color.html\"></core-item>\n    \n    </sampler-scaffold>\n\nUse `label` to set the sampler label and `responsiveWidth` to change the layout \nof the scaffold.",
      "type": "polymer",
      "ns": "polymer",
      "title": "Sampler scaffold",
      "name": "sampler-scaffold"
    }
  ],
  "twigs": []
}